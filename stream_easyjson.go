// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package stream

import (
	json "encoding/json"
	easyjson "github.com/getstream/easyjson"
	jlexer "github.com/getstream/easyjson/jlexer"
	jwriter "github.com/getstream/easyjson/jwriter"
	multipart "mime/multipart"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV3(in *jlexer.Lexer, out *usersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Users = make(map[string]*User)
				} else {
					out.Users = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *User
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(User)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Users)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV3(out *jwriter.Writer, in usersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Users {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV3(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV31(in *jlexer.Lexer, out *usersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Users = make(map[string]userRequest)
				} else {
					out.Users = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 userRequest
					(v3).UnmarshalEasyJSON(in)
					(out.Users)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV31(out *jwriter.Writer, in usersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Users {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				(v4Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV31(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV32(in *jlexer.Lexer, out *userRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.User = new(User)
	for key := range out.ExtraData {
		delete(out.ExtraData, key)
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]*Mute, 0, 8)
					} else {
						out.Mutes = []*Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Mute
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Mute)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Mutes = append(out.Mutes, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV32(out *jwriter.Writer, in userRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	if in.Online {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	if in.Invisible {
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	if len(in.Mutes) != 0 {
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Mutes {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	for k, v := range in.ExtraData {
		switch k {
		case "id", "name", "image", "role", "online", "invisible", "mutes":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV32(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV33(in *jlexer.Lexer, out *sendFileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			out.File = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV33(out *jwriter.Writer, in sendFileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		out.String(string(in.File))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sendFileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sendFileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sendFileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sendFileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV33(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV34(in *jlexer.Lexer, out *sendActionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "form_data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FormData = make(map[string]string)
				} else {
					out.FormData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.FormData)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV34(out *jwriter.Writer, in sendActionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"form_data\":"
		out.RawString(prefix)
		if in.FormData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.FormData {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sendActionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sendActionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sendActionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sendActionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV34(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV35(in *jlexer.Lexer, out *searchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]searchMessageResponse, 0, 8)
					} else {
						out.Results = []searchMessageResponse{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v10 searchMessageResponse
					(v10).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV35(out *jwriter.Writer, in searchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Results {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v searchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *searchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV35(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV36(in *jlexer.Lexer, out *searchMessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV36(out *jwriter.Writer, in searchMessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v searchMessageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchMessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *searchMessageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchMessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV36(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV37(in *jlexer.Lexer, out *repliesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *Message
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Message)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV37(out *jwriter.Writer, in repliesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Messages {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repliesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repliesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repliesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repliesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV37(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV38(in *jlexer.Lexer, out *reactionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*Reaction, 0, 8)
					} else {
						out.Reactions = []*Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *Reaction
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(Reaction)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Reactions = append(out.Reactions, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV38(out *jwriter.Writer, in reactionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix[1:])
		if in.Reactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Reactions {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV38(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV39(in *jlexer.Lexer, out *reactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV39(out *jwriter.Writer, in reactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV39(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV310(in *jlexer.Lexer, out *reactionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV310(out *jwriter.Writer, in reactionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix[1:])
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV310(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV310(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV310(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV310(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV311(in *jlexer.Lexer, out *queryUsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *User
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(User)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV311(out *jwriter.Writer, in queryUsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Users {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryUsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV311(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryUsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV311(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryUsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV311(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryUsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV311(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV312(in *jlexer.Lexer, out *queryUsersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
				out.FilterConditions = nil
			} else {
				if out.FilterConditions == nil {
					out.FilterConditions = new(QueryOption)
				}
				(*out.FilterConditions).UnmarshalEasyJSON(in)
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]*SortOption, 0, 8)
					} else {
						out.Sort = []*SortOption{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *SortOption
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(SortOption)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Sort = append(out.Sort, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV312(out *jwriter.Writer, in queryUsersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FilterConditions != nil {
		const prefix string = ",\"filter_conditions\":"
		first = false
		out.RawString(prefix[1:])
		(*in.FilterConditions).MarshalEasyJSON(out)
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Sort {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryUsersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV312(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryUsersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV312(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryUsersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV312(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryUsersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV312(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV313(in *jlexer.Lexer, out *queryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *Message
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Message)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(ChannelMember)
						}
						(*v26).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(ChannelRead)
						}
						(*v27).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV313(out *jwriter.Writer, in queryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Channel).MarshalEasyJSON(out)
	}
	if len(in.Messages) != 0 {
		const prefix string = ",\"messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Messages {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					(*v29).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Members {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					(*v31).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Read) != 0 {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Read {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV313(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV313(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV313(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV313(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV314(in *jlexer.Lexer, out *queryChannelResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *Message
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(Message)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(ChannelRead)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v36 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(ChannelMember)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV314(out *jwriter.Writer, in queryChannelResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		if in.Channel == nil {
			out.RawString("null")
		} else {
			(*in.Channel).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Messages {
				if v37 > 0 {
					out.RawByte(',')
				}
				if v38 == nil {
					out.RawString("null")
				} else {
					(*v38).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Read {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					(*v40).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Members {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					(*v42).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV314(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV314(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV314(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV314(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV315(in *jlexer.Lexer, out *queryChannelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]queryChannelResponseData, 0, 0)
					} else {
						out.Channels = []queryChannelResponseData{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v43 queryChannelResponseData
					(v43).UnmarshalEasyJSON(in)
					out.Channels = append(out.Channels, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV315(out *jwriter.Writer, in queryChannelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix[1:])
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Channels {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV315(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV315(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV315(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV315(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV316(in *jlexer.Lexer, out *queryChannelRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "watch":
			out.Watch = bool(in.Bool())
		case "state":
			out.State = bool(in.Bool())
		case "presence":
			out.Presence = bool(in.Bool())
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
				out.FilterConditions = nil
			} else {
				if out.FilterConditions == nil {
					out.FilterConditions = new(QueryOption)
				}
				(*out.FilterConditions).UnmarshalEasyJSON(in)
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]*SortOption, 0, 8)
					} else {
						out.Sort = []*SortOption{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v46 *SortOption
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(SortOption)
						}
						(*v46).UnmarshalEasyJSON(in)
					}
					out.Sort = append(out.Sort, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV316(out *jwriter.Writer, in queryChannelRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"watch\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Watch))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Bool(bool(in.State))
	}
	{
		const prefix string = ",\"presence\":"
		out.RawString(prefix)
		out.Bool(bool(in.Presence))
	}
	if in.FilterConditions != nil {
		const prefix string = ",\"filter_conditions\":"
		out.RawString(prefix)
		(*in.FilterConditions).MarshalEasyJSON(out)
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v47, v48 := range in.Sort {
				if v47 > 0 {
					out.RawByte(',')
				}
				if v48 == nil {
					out.RawString("null")
				} else {
					(*v48).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV316(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV316(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV316(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV316(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV317(in *jlexer.Lexer, out *partialUserUpdateReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]PartialUserUpdate, 0, 1)
					} else {
						out.Users = []PartialUserUpdate{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v49 PartialUserUpdate
					(v49).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV317(out *jwriter.Writer, in partialUserUpdateReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Users {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v partialUserUpdateReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV317(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v partialUserUpdateReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV317(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *partialUserUpdateReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV317(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *partialUserUpdateReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV317(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV318(in *jlexer.Lexer, out *option) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV318(out *jwriter.Writer, in option) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v option) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV318(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v option) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV318(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *option) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV318(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *option) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV318(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV319(in *jlexer.Lexer, out *multipartForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Writer = new(multipart.Writer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV319(out *jwriter.Writer, in multipartForm) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v multipartForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV319(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v multipartForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV319(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *multipartForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV319(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *multipartForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV319(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV320(in *jlexer.Lexer, out *messageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV320(out *jwriter.Writer, in messageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV320(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV320(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV320(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV320(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV321(in *jlexer.Lexer, out *messageRequestUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV321(out *jwriter.Writer, in messageRequestUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequestUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV321(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequestUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV321(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequestUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV321(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequestUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV321(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV322(in *jlexer.Lexer, out *messageRequestMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	for key := range out.ExtraData {
		delete(out.ExtraData, key)
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v52 *Attachment
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(Attachment)
						}
						(*v52).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make([]string, 0, 4)
					} else {
						out.MentionedUsers = []string{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.MentionedUsers = append(out.MentionedUsers, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent_id":
			out.ParentID = string(in.String())
		case "show_in_channel":
			out.ShowInChannel = bool(in.Bool())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV322(out *jwriter.Writer, in messageRequestMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.Attachments {
				if v54 > 0 {
					out.RawByte(',')
				}
				if v55 == nil {
					out.RawString("null")
				} else {
					(*v55).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.MentionedUsers {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"show_in_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowInChannel))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "text", "attachments", "user", "mentioned_users", "parent_id", "show_in_channel":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequestMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV322(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequestMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV322(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequestMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV322(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequestMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV322(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV323(in *jlexer.Lexer, out *messageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV323(out *jwriter.Writer, in messageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV323(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV323(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV323(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV323(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV324(in *jlexer.Lexer, out *eventRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(Event)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV324(out *jwriter.Writer, in eventRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		if in.Event == nil {
			out.RawString("null")
		} else {
			(*in.Event).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v eventRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV324(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v eventRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV324(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *eventRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV324(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *eventRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV324(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV325(in *jlexer.Lexer, out *devicesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*Device, 0, 8)
					} else {
						out.Devices = []*Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *Device
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(Device)
						}
						(*v58).UnmarshalEasyJSON(in)
					}
					out.Devices = append(out.Devices, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV325(out *jwriter.Writer, in devicesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devices\":"
		out.RawString(prefix[1:])
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Devices {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					(*v60).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v devicesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV325(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v devicesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV325(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *devicesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV325(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *devicesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV325(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV326(in *jlexer.Lexer, out *channelTypeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_types":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ChannelTypes = make(map[string]*ChannelType)
				} else {
					out.ChannelTypes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v61 *ChannelType
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(ChannelType)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					(out.ChannelTypes)[key] = v61
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV326(out *jwriter.Writer, in channelTypeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_types\":"
		out.RawString(prefix[1:])
		if in.ChannelTypes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.ChannelTypes {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v62Name))
				out.RawByte(':')
				if v62Value == nil {
					out.RawString("null")
				} else {
					(*v62Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV326(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV326(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV326(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV326(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV327(in *jlexer.Lexer, out *channelTypeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ChannelType = new(ChannelType)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]string, 0, 4)
					} else {
						out.Commands = []string{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v63 string
					v63 = string(in.String())
					out.Commands = append(out.Commands, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *Permission
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(Permission)
						}
						(*v64).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV327(out *jwriter.Writer, in channelTypeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Commands {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.Permissions {
				if v67 > 0 {
					out.RawByte(',')
				}
				if v68 == nil {
					out.RawString("null")
				} else {
					(*v68).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV327(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV327(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV327(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV327(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV328(in *jlexer.Lexer, out *appResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(AppConfig)
				}
				(*out.App).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV328(out *jwriter.Writer, in appResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix[1:])
		if in.App == nil {
			out.RawString("null")
		} else {
			(*in.App).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v appResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV328(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v appResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV328(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *appResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV328(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *appResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV328(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV329(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	for key := range out.ExtraData {
		delete(out.ExtraData, key)
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		case "last_active":
			if in.IsNull() {
				in.Skip()
				out.LastActive = nil
			} else {
				if out.LastActive == nil {
					out.LastActive = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastActive).UnmarshalJSON(data))
				}
			}
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]*Mute, 0, 8)
					} else {
						out.Mutes = []*Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v69 *Mute
					if in.IsNull() {
						in.Skip()
						v69 = nil
					} else {
						if v69 == nil {
							v69 = new(Mute)
						}
						(*v69).UnmarshalEasyJSON(in)
					}
					out.Mutes = append(out.Mutes, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV329(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	if in.Online {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	if in.Invisible {
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((*in.UpdatedAt).MarshalJSON())
	}
	if in.LastActive != nil {
		const prefix string = ",\"last_active\":"
		out.RawString(prefix)
		out.Raw((*in.LastActive).MarshalJSON())
	}
	if len(in.Mutes) != 0 {
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v70, v71 := range in.Mutes {
				if v70 > 0 {
					out.RawByte(',')
				}
				if v71 == nil {
					out.RawString("null")
				} else {
					(*v71).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	for k, v := range in.ExtraData {
		switch k {
		case "id", "name", "image", "role", "online", "invisible", "created_at", "updated_at", "last_active", "mutes":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV329(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV329(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV329(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV329(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV330(in *jlexer.Lexer, out *SortOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "direction":
			out.Direction = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV330(out *jwriter.Writer, in SortOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.Int(int(in.Direction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SortOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV330(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SortOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV330(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SortOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV330(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SortOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV330(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV331(in *jlexer.Lexer, out *SendFileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FileName":
			out.FileName = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "ContentType":
			out.ContentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV331(out *jwriter.Writer, in SendFileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FileName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendFileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV331(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendFileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV331(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendFileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV331(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendFileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV331(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV332(in *jlexer.Lexer, out *SearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Filters = make(map[string]interface{})
				} else {
					out.Filters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v72 interface{}
					if m, ok := v72.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v72.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v72 = in.Interface()
					}
					(out.Filters)[key] = v72
					in.WantComma()
				}
				in.Delim('}')
			}
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV332(out *jwriter.Writer, in SearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"filter_conditions\":"
		out.RawString(prefix)
		if in.Filters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v73First := true
			for v73Name, v73Value := range in.Filters {
				if v73First {
					v73First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v73Name))
				out.RawByte(':')
				if m, ok := v73Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v73Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v73Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV332(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV332(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV332(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV332(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV333(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	for key := range out.ExtraData {
		delete(out.ExtraData, key)
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV333(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "message_id", "user_id", "type":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV333(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV333(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV333(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV333(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV334(in *jlexer.Lexer, out *QueryOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	for key := range out.Filter {
		delete(out.Filter, key)
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		default:
			if out.Filter == nil {
				out.Filter = make(map[string]interface{})
			}
			out.Filter[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV334(out *jwriter.Writer, in QueryOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	for k, v := range in.Filter {
		switch k {
		case "limit", "offset":
			continue // don't allow field overwrites
		}
		if first {
			first = false
		} else {
			out.RawByte(',')
		}
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV334(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV334(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV334(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV334(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV335(in *jlexer.Lexer, out *PushNotificationFields) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apn":
			(out.APNConfig).UnmarshalEasyJSON(in)
		case "firebase":
			(out.FirebaseConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV335(out *jwriter.Writer, in PushNotificationFields) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apn\":"
		out.RawString(prefix[1:])
		(in.APNConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"firebase\":"
		out.RawString(prefix)
		(in.FirebaseConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushNotificationFields) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV335(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushNotificationFields) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV335(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushNotificationFields) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV335(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushNotificationFields) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV335(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV336(in *jlexer.Lexer, out *Policy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.Resources = append(out.Resources, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v75 string
					v75 = string(in.String())
					out.Roles = append(out.Roles, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			out.Action = int(in.Int())
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV336(out *jwriter.Writer, in Policy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.Resources {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.String(string(v77))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Roles {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.String(string(v79))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Int(int(in.Action))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Policy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV336(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Policy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV336(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Policy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV336(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Policy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV336(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV337(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.Resources = append(out.Resources, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v81 string
					v81 = string(in.String())
					out.Roles = append(out.Roles, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV337(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v82, v83 := range in.Resources {
				if v82 > 0 {
					out.RawByte(',')
				}
				out.String(string(v83))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Roles {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.String(string(v85))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV337(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV337(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV337(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV337(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV338(in *jlexer.Lexer, out *PartialUserUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "set":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Set = make(map[string]interface{})
				} else {
					out.Set = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v86 interface{}
					if m, ok := v86.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v86.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v86 = in.Interface()
					}
					(out.Set)[key] = v86
					in.WantComma()
				}
				in.Delim('}')
			}
		case "unset":
			if in.IsNull() {
				in.Skip()
				out.Unset = nil
			} else {
				in.Delim('[')
				if out.Unset == nil {
					if !in.IsDelim(']') {
						out.Unset = make([]string, 0, 4)
					} else {
						out.Unset = []string{}
					}
				} else {
					out.Unset = (out.Unset)[:0]
				}
				for !in.IsDelim(']') {
					var v87 string
					v87 = string(in.String())
					out.Unset = append(out.Unset, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV338(out *jwriter.Writer, in PartialUserUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Set) != 0 {
		const prefix string = ",\"set\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v88First := true
			for v88Name, v88Value := range in.Set {
				if v88First {
					v88First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v88Name))
				out.RawByte(':')
				if m, ok := v88Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v88Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v88Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Unset) != 0 {
		const prefix string = ",\"unset\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v89, v90 := range in.Unset {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PartialUserUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV338(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartialUserUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV338(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PartialUserUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV338(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartialUserUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV338(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV339(in *jlexer.Lexer, out *Mute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "target":
			(out.Target).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV339(out *jwriter.Writer, in Mute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		(in.Target).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV339(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV339(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV339(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV339(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV340(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "html":
			out.HTML = string(in.String())
		case "type":
			out.Type = MessageType(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v91 *Attachment
					if in.IsNull() {
						in.Skip()
						v91 = nil
					} else {
						if v91 == nil {
							v91 = new(Attachment)
						}
						(*v91).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latest_reactions":
			if in.IsNull() {
				in.Skip()
				out.LatestReactions = nil
			} else {
				in.Delim('[')
				if out.LatestReactions == nil {
					if !in.IsDelim(']') {
						out.LatestReactions = make([]*Reaction, 0, 8)
					} else {
						out.LatestReactions = []*Reaction{}
					}
				} else {
					out.LatestReactions = (out.LatestReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v92 *Reaction
					if in.IsNull() {
						in.Skip()
						v92 = nil
					} else {
						if v92 == nil {
							v92 = new(Reaction)
						}
						(*v92).UnmarshalEasyJSON(in)
					}
					out.LatestReactions = append(out.LatestReactions, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "own_reactions":
			if in.IsNull() {
				in.Skip()
				out.OwnReactions = nil
			} else {
				in.Delim('[')
				if out.OwnReactions == nil {
					if !in.IsDelim(']') {
						out.OwnReactions = make([]*Reaction, 0, 8)
					} else {
						out.OwnReactions = []*Reaction{}
					}
				} else {
					out.OwnReactions = (out.OwnReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v93 *Reaction
					if in.IsNull() {
						in.Skip()
						v93 = nil
					} else {
						if v93 == nil {
							v93 = new(Reaction)
						}
						(*v93).UnmarshalEasyJSON(in)
					}
					out.OwnReactions = append(out.OwnReactions, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reaction_counts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ReactionCounts = make(map[string]int)
				} else {
					out.ReactionCounts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v94 int
					v94 = int(in.Int())
					(out.ReactionCounts)[key] = v94
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent_id":
			out.ParentID = string(in.String())
		case "show_in_channel":
			out.ShowInChannel = bool(in.Bool())
		case "reply_count":
			out.ReplyCount = int(in.Int())
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make([]*User, 0, 8)
					} else {
						out.MentionedUsers = []*User{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v95 *User
					if in.IsNull() {
						in.Skip()
						v95 = nil
					} else {
						if v95 == nil {
							v95 = new(User)
						}
						(*v95).UnmarshalEasyJSON(in)
					}
					out.MentionedUsers = append(out.MentionedUsers, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		case "ExtraData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExtraData = make(map[string]interface{})
				} else {
					out.ExtraData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v96 interface{}
					if m, ok := v96.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v96.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v96 = in.Interface()
					}
					(out.ExtraData)[key] = v96
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV340(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v97, v98 := range in.Attachments {
				if v97 > 0 {
					out.RawByte(',')
				}
				if v98 == nil {
					out.RawString("null")
				} else {
					(*v98).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latest_reactions\":"
		out.RawString(prefix)
		if in.LatestReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v99, v100 := range in.LatestReactions {
				if v99 > 0 {
					out.RawByte(',')
				}
				if v100 == nil {
					out.RawString("null")
				} else {
					(*v100).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"own_reactions\":"
		out.RawString(prefix)
		if in.OwnReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.OwnReactions {
				if v101 > 0 {
					out.RawByte(',')
				}
				if v102 == nil {
					out.RawString("null")
				} else {
					(*v102).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reaction_counts\":"
		out.RawString(prefix)
		if in.ReactionCounts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v103First := true
			for v103Name, v103Value := range in.ReactionCounts {
				if v103First {
					v103First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v103Name))
				out.RawByte(':')
				out.Int(int(v103Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"show_in_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowInChannel))
	}
	if in.ReplyCount != 0 {
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyCount))
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v104, v105 := range in.MentionedUsers {
				if v104 > 0 {
					out.RawByte(',')
				}
				if v105 == nil {
					out.RawString("null")
				} else {
					(*v105).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((*in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"ExtraData\":"
		out.RawString(prefix)
		if in.ExtraData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v106First := true
			for v106Name, v106Value := range in.ExtraData {
				if v106First {
					v106First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v106Name))
				out.RawByte(':')
				if m, ok := v106Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v106Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v106Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV340(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV340(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV340(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV340(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV341(in *jlexer.Lexer, out *FirebaseConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "notification_template":
			out.NotificationTemplate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV341(out *jwriter.Writer, in FirebaseConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"notification_template\":"
		out.RawString(prefix)
		out.String(string(in.NotificationTemplate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FirebaseConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV341(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FirebaseConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV341(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FirebaseConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV341(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FirebaseConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV341(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV342(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cid":
			out.CID = string(in.String())
		case "type":
			out.Type = EventType(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "member":
			if in.IsNull() {
				in.Skip()
				out.Member = nil
			} else {
				if out.Member == nil {
					out.Member = new(ChannelMember)
				}
				(*out.Member).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserID = string(in.String())
		case "me":
			if in.IsNull() {
				in.Skip()
				out.OwnUser = nil
			} else {
				if out.OwnUser == nil {
					out.OwnUser = new(User)
				}
				(*out.OwnUser).UnmarshalEasyJSON(in)
			}
		case "watcher_count":
			out.WatcherCount = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV342(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CID != "" {
		const prefix string = ",\"cid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Reaction != nil {
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		(*in.Reaction).MarshalEasyJSON(out)
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		(*in.Channel).MarshalEasyJSON(out)
	}
	if in.Member != nil {
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(*in.Member).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(*in.User).MarshalEasyJSON(out)
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	if in.OwnUser != nil {
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		(*in.OwnUser).MarshalEasyJSON(out)
	}
	if in.WatcherCount != 0 {
		const prefix string = ",\"watcher_count\":"
		out.RawString(prefix)
		out.Int(int(in.WatcherCount))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV342(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV342(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV342(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV342(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV343(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "push_provider":
			out.PushProvider = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV343(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"push_provider\":"
		out.RawString(prefix)
		out.String(string(in.PushProvider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV343(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV343(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV343(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV343(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV344(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "args":
			out.Args = string(in.String())
		case "set":
			out.Set = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV344(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		out.String(string(in.Args))
	}
	{
		const prefix string = ",\"set\":"
		out.RawString(prefix)
		out.String(string(in.Set))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV344(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV344(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV344(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV344(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV345(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BaseURL":
			out.BaseURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV345(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BaseURL\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV345(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV345(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV345(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV345(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV346(in *jlexer.Lexer, out *ChannelType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]*Command, 0, 8)
					} else {
						out.Commands = []*Command{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v107 *Command
					if in.IsNull() {
						in.Skip()
						v107 = nil
					} else {
						if v107 == nil {
							v107 = new(Command)
						}
						(*v107).UnmarshalEasyJSON(in)
					}
					out.Commands = append(out.Commands, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v108 *Permission
					if in.IsNull() {
						in.Skip()
						v108 = nil
					} else {
						if v108 == nil {
							v108 = new(Permission)
						}
						(*v108).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV346(out *jwriter.Writer, in ChannelType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v109, v110 := range in.Commands {
				if v109 > 0 {
					out.RawByte(',')
				}
				if v110 == nil {
					out.RawString("null")
				} else {
					(*v110).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v111, v112 := range in.Permissions {
				if v111 > 0 {
					out.RawByte(',')
				}
				if v112 == nil {
					out.RawString("null")
				} else {
					(*v112).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV346(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV346(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV346(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV346(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV347(in *jlexer.Lexer, out *ChannelRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "last_read":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRead).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV347(out *jwriter.Writer, in ChannelRead) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"last_read\":"
		out.RawString(prefix)
		out.Raw((in.LastRead).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV347(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV347(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV347(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV347(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV348(in *jlexer.Lexer, out *ChannelMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "is_moderator":
			out.IsModerator = bool(in.Bool())
		case "invited":
			out.Invited = bool(in.Bool())
		case "invite_accepted_at":
			if in.IsNull() {
				in.Skip()
				out.InviteAcceptedAt = nil
			} else {
				if out.InviteAcceptedAt == nil {
					out.InviteAcceptedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteAcceptedAt).UnmarshalJSON(data))
				}
			}
		case "invite_rejected_at":
			if in.IsNull() {
				in.Skip()
				out.InviteRejectedAt = nil
			} else {
				if out.InviteRejectedAt == nil {
					out.InviteRejectedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteRejectedAt).UnmarshalJSON(data))
				}
			}
		case "role":
			out.Role = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV348(out *jwriter.Writer, in ChannelMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.IsModerator {
		const prefix string = ",\"is_moderator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsModerator))
	}
	if in.Invited {
		const prefix string = ",\"invited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Invited))
	}
	if in.InviteAcceptedAt != nil {
		const prefix string = ",\"invite_accepted_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteAcceptedAt).MarshalJSON())
	}
	if in.InviteRejectedAt != nil {
		const prefix string = ",\"invite_rejected_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteRejectedAt).MarshalJSON())
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV348(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV348(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV348(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV348(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV349(in *jlexer.Lexer, out *ChannelConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV349(out *jwriter.Writer, in ChannelConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV349(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV349(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV349(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV349(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV350(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "cid":
			out.CID = string(in.String())
		case "config":
			(out.Config).UnmarshalEasyJSON(in)
		case "created_by":
			if in.IsNull() {
				in.Skip()
				out.CreatedBy = nil
			} else {
				if out.CreatedBy == nil {
					out.CreatedBy = new(User)
				}
				(*out.CreatedBy).UnmarshalEasyJSON(in)
			}
		case "frozen":
			out.Frozen = bool(in.Bool())
		case "member_count":
			out.MemberCount = int(in.Int())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v113 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v113 = nil
					} else {
						if v113 == nil {
							v113 = new(ChannelMember)
						}
						(*v113).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v113)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v114 *Message
					if in.IsNull() {
						in.Skip()
						v114 = nil
					} else {
						if v114 == nil {
							v114 = new(Message)
						}
						(*v114).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v115 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v115 = nil
					} else {
						if v115 == nil {
							v115 = new(ChannelRead)
						}
						(*v115).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "last_message_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMessageAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV350(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		(in.Config).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		if in.CreatedBy == nil {
			out.RawString("null")
		} else {
			(*in.CreatedBy).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"frozen\":"
		out.RawString(prefix)
		out.Bool(bool(in.Frozen))
	}
	{
		const prefix string = ",\"member_count\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v116, v117 := range in.Members {
				if v116 > 0 {
					out.RawByte(',')
				}
				if v117 == nil {
					out.RawString("null")
				} else {
					(*v117).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v118, v119 := range in.Messages {
				if v118 > 0 {
					out.RawByte(',')
				}
				if v119 == nil {
					out.RawString("null")
				} else {
					(*v119).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v120, v121 := range in.Read {
				if v120 > 0 {
					out.RawByte(',')
				}
				if v121 == nil {
					out.RawString("null")
				} else {
					(*v121).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"last_message_at\":"
		out.RawString(prefix)
		out.Raw((in.LastMessageAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV350(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV350(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV350(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV350(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV351(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	for key := range out.ExtraData {
		delete(out.ExtraData, key)
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "author_name":
			out.AuthorName = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "title_link":
			out.TitleLink = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "image_url":
			out.ImageURL = string(in.String())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "asset_url":
			out.AssetURL = string(in.String())
		case "og_scrape_url":
			out.OGScrapeURL = string(in.String())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV351(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.AuthorName != "" {
		const prefix string = ",\"author_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorName))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TitleLink != "" {
		const prefix string = ",\"title_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleLink))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageURL))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.AssetURL != "" {
		const prefix string = ",\"asset_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AssetURL))
	}
	if in.OGScrapeURL != "" {
		const prefix string = ",\"og_scrape_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OGScrapeURL))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "type", "author_name", "title", "title_link", "text", "image_url", "thumb_url", "asset_url", "og_scrape_url":
			continue // don't allow field overwrites
		}
		if first {
			first = false
		} else {
			out.RawByte(',')
		}
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV351(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV351(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV351(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV351(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV352(in *jlexer.Lexer, out *AppSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disable_auth_checks":
			if in.IsNull() {
				in.Skip()
				out.DisableAuth = nil
			} else {
				if out.DisableAuth == nil {
					out.DisableAuth = new(bool)
				}
				*out.DisableAuth = bool(in.Bool())
			}
		case "disable_permissions_checks":
			if in.IsNull() {
				in.Skip()
				out.DisablePermissions = nil
			} else {
				if out.DisablePermissions == nil {
					out.DisablePermissions = new(bool)
				}
				*out.DisablePermissions = bool(in.Bool())
			}
		case "apn_config":
			if in.IsNull() {
				in.Skip()
				out.APNConfig = nil
			} else {
				if out.APNConfig == nil {
					out.APNConfig = new(APNConfig)
				}
				(*out.APNConfig).UnmarshalEasyJSON(in)
			}
		case "firebase_config":
			if in.IsNull() {
				in.Skip()
				out.FirebaseConfig = nil
			} else {
				if out.FirebaseConfig == nil {
					out.FirebaseConfig = new(FirebaseConfig)
				}
				(*out.FirebaseConfig).UnmarshalEasyJSON(in)
			}
		case "webhook_url":
			if in.IsNull() {
				in.Skip()
				out.WebhookURL = nil
			} else {
				if out.WebhookURL == nil {
					out.WebhookURL = new(string)
				}
				*out.WebhookURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV352(out *jwriter.Writer, in AppSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisableAuth != nil {
		const prefix string = ",\"disable_auth_checks\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.DisableAuth))
	}
	if in.DisablePermissions != nil {
		const prefix string = ",\"disable_permissions_checks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DisablePermissions))
	}
	if in.APNConfig != nil {
		const prefix string = ",\"apn_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.APNConfig).MarshalEasyJSON(out)
	}
	if in.FirebaseConfig != nil {
		const prefix string = ",\"firebase_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FirebaseConfig).MarshalEasyJSON(out)
	}
	if in.WebhookURL != nil {
		const prefix string = ",\"webhook_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WebhookURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV352(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV352(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV352(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV352(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV353(in *jlexer.Lexer, out *AppConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "organization":
			out.OrganizationName = string(in.String())
		case "webhook_url":
			out.WebhookURL = string(in.String())
		case "suspended_explanation":
			out.SuspendedExplanation = string(in.String())
		case "push_notifications":
			(out.PushNotifications).UnmarshalEasyJSON(in)
		case "channel_configs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ConfigNameMap = make(map[string]*ChannelConfig)
				} else {
					out.ConfigNameMap = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v122 *ChannelConfig
					if in.IsNull() {
						in.Skip()
						v122 = nil
					} else {
						if v122 == nil {
							v122 = new(ChannelConfig)
						}
						(*v122).UnmarshalEasyJSON(in)
					}
					(out.ConfigNameMap)[key] = v122
					in.WantComma()
				}
				in.Delim('}')
			}
		case "policies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Policies = make(map[string][]Policy)
				} else {
					out.Policies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v123 []Policy
					if in.IsNull() {
						in.Skip()
						v123 = nil
					} else {
						in.Delim('[')
						if v123 == nil {
							if !in.IsDelim(']') {
								v123 = make([]Policy, 0, 0)
							} else {
								v123 = []Policy{}
							}
						} else {
							v123 = (v123)[:0]
						}
						for !in.IsDelim(']') {
							var v124 Policy
							(v124).UnmarshalEasyJSON(in)
							v123 = append(v123, v124)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Policies)[key] = v123
					in.WantComma()
				}
				in.Delim('}')
			}
		case "suspended":
			out.Suspended = bool(in.Bool())
		case "disable_auth_checks":
			out.DisableAuth = bool(in.Bool())
		case "disable_permissions_checks":
			out.DisablePermissions = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV353(out *jwriter.Writer, in AppConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"webhook_url\":"
		out.RawString(prefix)
		out.String(string(in.WebhookURL))
	}
	{
		const prefix string = ",\"suspended_explanation\":"
		out.RawString(prefix)
		out.String(string(in.SuspendedExplanation))
	}
	{
		const prefix string = ",\"push_notifications\":"
		out.RawString(prefix)
		(in.PushNotifications).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"channel_configs\":"
		out.RawString(prefix)
		if in.ConfigNameMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v125First := true
			for v125Name, v125Value := range in.ConfigNameMap {
				if v125First {
					v125First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v125Name))
				out.RawByte(':')
				if v125Value == nil {
					out.RawString("null")
				} else {
					(*v125Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"policies\":"
		out.RawString(prefix)
		if in.Policies == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v126First := true
			for v126Name, v126Value := range in.Policies {
				if v126First {
					v126First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v126Name))
				out.RawByte(':')
				if v126Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v127, v128 := range v126Value {
						if v127 > 0 {
							out.RawByte(',')
						}
						(v128).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"suspended\":"
		out.RawString(prefix)
		out.Bool(bool(in.Suspended))
	}
	{
		const prefix string = ",\"disable_auth_checks\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisableAuth))
	}
	{
		const prefix string = ",\"disable_permissions_checks\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisablePermissions))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV353(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV353(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV353(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV353(l, v)
}
func easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV354(in *jlexer.Lexer, out *APNConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "development":
			out.Development = bool(in.Bool())
		case "auth_type":
			out.AuthType = string(in.String())
		case "auth_key":
			if in.IsNull() {
				in.Skip()
				out.AuthKey = nil
			} else {
				out.AuthKey = in.Bytes()
			}
		case "notification_template":
			out.NotificationTemplate = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "bundle_id":
			out.BundleID = string(in.String())
		case "team_id":
			out.TeamID = string(in.String())
		case "key_id":
			out.KeyID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV354(out *jwriter.Writer, in APNConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"development\":"
		out.RawString(prefix)
		out.Bool(bool(in.Development))
	}
	if in.AuthType != "" {
		const prefix string = ",\"auth_type\":"
		out.RawString(prefix)
		out.String(string(in.AuthType))
	}
	if len(in.AuthKey) != 0 {
		const prefix string = ",\"auth_key\":"
		out.RawString(prefix)
		out.Base64Bytes(in.AuthKey)
	}
	{
		const prefix string = ",\"notification_template\":"
		out.RawString(prefix)
		out.String(string(in.NotificationTemplate))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	if in.BundleID != "" {
		const prefix string = ",\"bundle_id\":"
		out.RawString(prefix)
		out.String(string(in.BundleID))
	}
	if in.TeamID != "" {
		const prefix string = ",\"team_id\":"
		out.RawString(prefix)
		out.String(string(in.TeamID))
	}
	if in.KeyID != "" {
		const prefix string = ",\"key_id\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APNConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV354(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APNConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComGetStreamStreamChatGoV354(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APNConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV354(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APNConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComGetStreamStreamChatGoV354(l, v)
}
