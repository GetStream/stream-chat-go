// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package stream_chat

import (
	json "encoding/json"
	easyjson "github.com/Bogdan-D/easyjson"
	jlexer "github.com/Bogdan-D/easyjson/jlexer"
	jwriter "github.com/Bogdan-D/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo(in *jlexer.Lexer, out *usersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Users = make(map[string]User)
				} else {
					out.Users = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 User
					(v1).UnmarshalEasyJSON(in)
					(out.Users)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo(out *jwriter.Writer, in usersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Users {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				(v2Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo1(in *jlexer.Lexer, out *usersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Users = make(map[string]User)
				} else {
					out.Users = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 User
					(v3).UnmarshalEasyJSON(in)
					(out.Users)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo1(out *jwriter.Writer, in usersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Users {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				(v4Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo1(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo2(in *jlexer.Lexer, out *reactionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]Reaction, 0, 1)
					} else {
						out.Reactions = []Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Reaction
					(v5).UnmarshalEasyJSON(in)
					out.Reactions = append(out.Reactions, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo2(out *jwriter.Writer, in reactionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix[1:])
		if in.Reactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Reactions {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo2(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo3(in *jlexer.Lexer, out *reactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		case "reaction":
			(out.Reaction).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo3(out *jwriter.Writer, in reactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		(in.Reaction).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo3(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo4(in *jlexer.Lexer, out *reactionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo4(out *jwriter.Writer, in reactionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix[1:])
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo4(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo5(in *jlexer.Lexer, out *queryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				if out.Messages == nil {
					out.Messages = new(messages)
				}
				if in.IsNull() {
					in.Skip()
					*out.Messages = nil
				} else {
					in.Delim('[')
					if *out.Messages == nil {
						if !in.IsDelim(']') {
							*out.Messages = make(messages, 0, 0)
						} else {
							*out.Messages = messages{}
						}
					} else {
						*out.Messages = (*out.Messages)[:0]
					}
					for !in.IsDelim(']') {
						var v8 Message
						(v8).UnmarshalEasyJSON(in)
						*out.Messages = append(*out.Messages, v8)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				if out.Members == nil {
					out.Members = new(members)
				}
				if in.IsNull() {
					in.Skip()
					*out.Members = nil
				} else {
					in.Delim('[')
					if *out.Members == nil {
						if !in.IsDelim(']') {
							*out.Members = make(members, 0, 0)
						} else {
							*out.Members = members{}
						}
					} else {
						*out.Members = (*out.Members)[:0]
					}
					for !in.IsDelim(']') {
						var v9 ChannelMember
						(v9).UnmarshalEasyJSON(in)
						*out.Members = append(*out.Members, v9)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				if out.Read == nil {
					out.Read = new(users)
				}
				if in.IsNull() {
					in.Skip()
					*out.Read = nil
				} else {
					in.Delim('[')
					if *out.Read == nil {
						if !in.IsDelim(']') {
							*out.Read = make(users, 0, 0)
						} else {
							*out.Read = users{}
						}
					} else {
						*out.Read = (*out.Read)[:0]
					}
					for !in.IsDelim(']') {
						var v10 User
						(v10).UnmarshalEasyJSON(in)
						*out.Read = append(*out.Read, v10)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo5(out *jwriter.Writer, in queryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Channel).MarshalEasyJSON(out)
	}
	if in.Messages != nil {
		const prefix string = ",\"messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range *in.Messages {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Members != nil {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range *in.Members {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Read != nil {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range *in.Read {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo5(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo6(in *jlexer.Lexer, out *messageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo6(out *jwriter.Writer, in messageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo6(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo7(in *jlexer.Lexer, out *messageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo7(out *jwriter.Writer, in messageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo7(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo8(in *jlexer.Lexer, out *eventRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			(out.Event).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo8(out *jwriter.Writer, in eventRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		(in.Event).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v eventRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v eventRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *eventRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *eventRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo8(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo9(in *jlexer.Lexer, out *devicesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]Device, 0, 1)
					} else {
						out.Devices = []Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v17 Device
					(v17).UnmarshalEasyJSON(in)
					out.Devices = append(out.Devices, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo9(out *jwriter.Writer, in devicesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devices\":"
		out.RawString(prefix[1:])
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Devices {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v devicesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v devicesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *devicesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *devicesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo9(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo10(in *jlexer.Lexer, out *channelTypeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_types":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ChannelTypes = make(map[string]ChannelType)
				} else {
					out.ChannelTypes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 ChannelType
					(v20).UnmarshalEasyJSON(in)
					(out.ChannelTypes)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo10(out *jwriter.Writer, in channelTypeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_types\":"
		out.RawString(prefix[1:])
		if in.ChannelTypes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.ChannelTypes {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				(v21Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo10(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo11(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.ExtraData {
			delete(out.ExtraData, key)
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]Mute, 0, 0)
					} else {
						out.Mutes = []Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Mute
					(v22).UnmarshalEasyJSON(in)
					out.Mutes = append(out.Mutes, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "last_active":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastActive).UnmarshalJSON(data))
			}
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo11(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	{
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		if in.Mutes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Mutes {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"last_active\":"
		out.RawString(prefix)
		out.Raw((in.LastActive).MarshalJSON())
	}
	for k, v := range in.ExtraData {
		switch k {
		case "id", "name", "image", "role", "online", "invisible", "mutes", "created_at", "updated_at", "last_active":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo11(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo12(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.ExtraData {
			delete(out.ExtraData, key)
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo12(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "message_id", "user_id", "type":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo12(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo13(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Resources = append(out.Resources, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Roles = append(out.Roles, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo13(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Resources {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Roles {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo13(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo14(in *jlexer.Lexer, out *Mute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "User":
			(out.User).UnmarshalEasyJSON(in)
		case "Target":
			(out.Target).UnmarshalEasyJSON(in)
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo14(out *jwriter.Writer, in Mute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Target\":"
		out.RawString(prefix)
		(in.Target).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo14(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo15(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "html":
			out.HTML = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make(attachments, 0, 1)
					} else {
						out.Attachments = attachments{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Attachment
					(v31).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latest_reactions":
			if in.IsNull() {
				in.Skip()
				out.LatestReactions = nil
			} else {
				in.Delim('[')
				if out.LatestReactions == nil {
					if !in.IsDelim(']') {
						out.LatestReactions = make([]Reaction, 0, 1)
					} else {
						out.LatestReactions = []Reaction{}
					}
				} else {
					out.LatestReactions = (out.LatestReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Reaction
					(v32).UnmarshalEasyJSON(in)
					out.LatestReactions = append(out.LatestReactions, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "own_reactions":
			if in.IsNull() {
				in.Skip()
				out.OwnReactions = nil
			} else {
				in.Delim('[')
				if out.OwnReactions == nil {
					if !in.IsDelim(']') {
						out.OwnReactions = make([]Reaction, 0, 1)
					} else {
						out.OwnReactions = []Reaction{}
					}
				} else {
					out.OwnReactions = (out.OwnReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Reaction
					(v33).UnmarshalEasyJSON(in)
					out.OwnReactions = append(out.OwnReactions, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reaction_counts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ReactionCounts = make(map[string]int)
				} else {
					out.ReactionCounts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 int
					v34 = int(in.Int())
					(out.ReactionCounts)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "reply_count":
			out.ReplyCount = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "ExtraData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExtraData = make(map[string]interface{})
				} else {
					out.ExtraData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 interface{}
					if m, ok := v35.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v35.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v35 = in.Interface()
					}
					(out.ExtraData)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make(users, 0, 0)
					} else {
						out.MentionedUsers = users{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v36 User
					(v36).UnmarshalEasyJSON(in)
					out.MentionedUsers = append(out.MentionedUsers, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo15(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Attachments {
				if v37 > 0 {
					out.RawByte(',')
				}
				(v38).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latest_reactions\":"
		out.RawString(prefix)
		if in.LatestReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.LatestReactions {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"own_reactions\":"
		out.RawString(prefix)
		if in.OwnReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.OwnReactions {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reaction_counts\":"
		out.RawString(prefix)
		if in.ReactionCounts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.ReactionCounts {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v43Name))
				out.RawByte(':')
				out.Int(int(v43Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyCount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"ExtraData\":"
		out.RawString(prefix)
		if in.ExtraData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v44First := true
			for v44Name, v44Value := range in.ExtraData {
				if v44First {
					v44First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v44Name))
				out.RawByte(':')
				if m, ok := v44Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v44Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v44Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.MentionedUsers {
				if v45 > 0 {
					out.RawByte(',')
				}
				(v46).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo15(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo16(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cid":
			out.CID = string(in.String())
		case "type":
			out.Type = EventType(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "member":
			if in.IsNull() {
				in.Skip()
				out.Member = nil
			} else {
				if out.Member == nil {
					out.Member = new(ChannelMember)
				}
				(*out.Member).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserID = string(in.String())
		case "me":
			if in.IsNull() {
				in.Skip()
				out.OwnUser = nil
			} else {
				if out.OwnUser == nil {
					out.OwnUser = new(User)
				}
				(*out.OwnUser).UnmarshalEasyJSON(in)
			}
		case "watcher_count":
			out.WatcherCount = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo16(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CID != "" {
		const prefix string = ",\"cid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Reaction != nil {
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		(*in.Reaction).MarshalEasyJSON(out)
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		(*in.Channel).MarshalEasyJSON(out)
	}
	if in.Member != nil {
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(*in.Member).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(*in.User).MarshalEasyJSON(out)
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	if in.OwnUser != nil {
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		(*in.OwnUser).MarshalEasyJSON(out)
	}
	if in.WatcherCount != 0 {
		const prefix string = ",\"watcher_count\":"
		out.RawString(prefix)
		out.Int(int(in.WatcherCount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo16(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo17(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "push_provider":
			out.PushProvider = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo17(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"push_provider\":"
		out.RawString(prefix)
		out.String(string(in.PushProvider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo17(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo18(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "args":
			out.Args = string(in.String())
		case "set":
			out.Set = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo18(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		out.String(string(in.Args))
	}
	{
		const prefix string = ",\"set\":"
		out.RawString(prefix)
		out.String(string(in.Set))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo18(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo19(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo19(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo19(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo20(in *jlexer.Lexer, out *ChannelType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Commands).UnmarshalJSON(data))
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]Permission, 0, 0)
					} else {
						out.Permissions = []Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v47 Permission
					(v47).UnmarshalEasyJSON(in)
					out.Permissions = append(out.Permissions, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo20(out *jwriter.Writer, in ChannelType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		out.Raw((in.Commands).MarshalJSON())
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Permissions {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo20(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo21(in *jlexer.Lexer, out *ChannelMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "is_moderator":
			out.IsModerator = bool(in.Bool())
		case "invited":
			out.Invited = bool(in.Bool())
		case "invite_accepted_at":
			if in.IsNull() {
				in.Skip()
				out.InviteAcceptedAt = nil
			} else {
				if out.InviteAcceptedAt == nil {
					out.InviteAcceptedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteAcceptedAt).UnmarshalJSON(data))
				}
			}
		case "invite_rejected_at":
			if in.IsNull() {
				in.Skip()
				out.InviteRejectedAt = nil
			} else {
				if out.InviteRejectedAt == nil {
					out.InviteRejectedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteRejectedAt).UnmarshalJSON(data))
				}
			}
		case "role":
			out.Role = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo21(out *jwriter.Writer, in ChannelMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.IsModerator {
		const prefix string = ",\"is_moderator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsModerator))
	}
	if in.Invited {
		const prefix string = ",\"invited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Invited))
	}
	if in.InviteAcceptedAt != nil {
		const prefix string = ",\"invite_accepted_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteAcceptedAt).MarshalJSON())
	}
	if in.InviteRejectedAt != nil {
		const prefix string = ",\"invite_rejected_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteRejectedAt).MarshalJSON())
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo21(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo22(in *jlexer.Lexer, out *ChannelConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo22(out *jwriter.Writer, in ChannelConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo22(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo23(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "cid":
			out.CID = string(in.String())
		case "created_by":
			(out.CreatedBy).UnmarshalEasyJSON(in)
		case "frozen":
			out.Frozen = bool(in.Bool())
		case "member_count":
			out.MemberCount = int(in.Int())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]ChannelMember, 0, 0)
					} else {
						out.Members = []ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v50 ChannelMember
					(v50).UnmarshalEasyJSON(in)
					out.Members = append(out.Members, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]Message, 0, 0)
					} else {
						out.Messages = []Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v51 Message
					(v51).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]User, 0, 0)
					} else {
						out.Read = []User{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v52 User
					(v52).UnmarshalEasyJSON(in)
					out.Read = append(out.Read, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			(out.Config).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "last_message_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMessageAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo23(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		(in.CreatedBy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"frozen\":"
		out.RawString(prefix)
		out.Bool(bool(in.Frozen))
	}
	{
		const prefix string = ",\"member_count\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Members {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Messages {
				if v55 > 0 {
					out.RawByte(',')
				}
				(v56).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.Read {
				if v57 > 0 {
					out.RawByte(',')
				}
				(v58).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		(in.Config).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"last_message_at\":"
		out.RawString(prefix)
		out.Raw((in.LastMessageAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo23(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo24(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo24(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo24(l, v)
}
