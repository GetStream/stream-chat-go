// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package stream_chat

import (
	json "encoding/json"
	easyjson "github.com/getstream/easyjson"
	jlexer "github.com/getstream/easyjson/jlexer"
	jwriter "github.com/getstream/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo(in *jlexer.Lexer, out *usersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Users = make(map[string]*User)
				} else {
					out.Users = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *User
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(User)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Users)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo(out *jwriter.Writer, in usersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Users {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo1(in *jlexer.Lexer, out *usersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Users = make(map[string]userRequest)
				} else {
					out.Users = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 userRequest
					(v3).UnmarshalEasyJSON(in)
					(out.Users)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo1(out *jwriter.Writer, in usersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Users {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				(v4Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo1(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo2(in *jlexer.Lexer, out *userRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.User = new(User)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]*Mute, 0, 8)
					} else {
						out.Mutes = []*Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Mute
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Mute)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Mutes = append(out.Mutes, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo2(out *jwriter.Writer, in userRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	{
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		if in.Mutes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Mutes {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo2(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo3(in *jlexer.Lexer, out *repliesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Message
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Message)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo3(out *jwriter.Writer, in repliesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Messages {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repliesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repliesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repliesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repliesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo3(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo4(in *jlexer.Lexer, out *reactionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*Reaction, 0, 8)
					} else {
						out.Reactions = []*Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *Reaction
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(Reaction)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.Reactions = append(out.Reactions, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo4(out *jwriter.Writer, in reactionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix[1:])
		if in.Reactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Reactions {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo4(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo5(in *jlexer.Lexer, out *reactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo5(out *jwriter.Writer, in reactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo5(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo6(in *jlexer.Lexer, out *reactionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo6(out *jwriter.Writer, in reactionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix[1:])
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo6(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo7(in *jlexer.Lexer, out *queryUsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *User
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(User)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo7(out *jwriter.Writer, in queryUsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Users {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					(*v16).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryUsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryUsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryUsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryUsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo7(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo8(in *jlexer.Lexer, out *queryUsersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
				out.FilterConditions = nil
			} else {
				if out.FilterConditions == nil {
					out.FilterConditions = new(QueryOption)
				}
				(*out.FilterConditions).UnmarshalEasyJSON(in)
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]*SortOption, 0, 8)
					} else {
						out.Sort = []*SortOption{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *SortOption
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(SortOption)
						}
						(*v17).UnmarshalEasyJSON(in)
					}
					out.Sort = append(out.Sort, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo8(out *jwriter.Writer, in queryUsersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FilterConditions != nil {
		const prefix string = ",\"filter_conditions\":"
		first = false
		out.RawString(prefix[1:])
		(*in.FilterConditions).MarshalEasyJSON(out)
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Sort {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryUsersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryUsersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryUsersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryUsersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo8(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo9(in *jlexer.Lexer, out *queryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *Message
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(Message)
						}
						(*v20).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(ChannelMember)
						}
						(*v21).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(ChannelRead)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo9(out *jwriter.Writer, in queryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Channel).MarshalEasyJSON(out)
	}
	if len(in.Messages) != 0 {
		const prefix string = ",\"messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Messages {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Members {
				if v25 > 0 {
					out.RawByte(',')
				}
				if v26 == nil {
					out.RawString("null")
				} else {
					(*v26).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Read) != 0 {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.Read {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil {
					out.RawString("null")
				} else {
					(*v28).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo9(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo10(in *jlexer.Lexer, out *queryChannelResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v29 *Message
					if in.IsNull() {
						in.Skip()
						v29 = nil
					} else {
						if v29 == nil {
							v29 = new(Message)
						}
						(*v29).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v30 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v30 = nil
					} else {
						if v30 == nil {
							v30 = new(ChannelRead)
						}
						(*v30).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(ChannelMember)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo10(out *jwriter.Writer, in queryChannelResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		if in.Channel == nil {
			out.RawString("null")
		} else {
			(*in.Channel).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Messages {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Read {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					(*v35).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Members {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					(*v37).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo10(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo11(in *jlexer.Lexer, out *queryChannelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]queryChannelResponseData, 0, 0)
					} else {
						out.Channels = []queryChannelResponseData{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v38 queryChannelResponseData
					(v38).UnmarshalEasyJSON(in)
					out.Channels = append(out.Channels, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo11(out *jwriter.Writer, in queryChannelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix[1:])
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Channels {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo11(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo12(in *jlexer.Lexer, out *queryChannelRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "watch":
			out.Watch = bool(in.Bool())
		case "state":
			out.State = bool(in.Bool())
		case "presence":
			out.Presence = bool(in.Bool())
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
				out.FilterConditions = nil
			} else {
				if out.FilterConditions == nil {
					out.FilterConditions = new(QueryOption)
				}
				(*out.FilterConditions).UnmarshalEasyJSON(in)
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]*SortOption, 0, 8)
					} else {
						out.Sort = []*SortOption{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *SortOption
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(SortOption)
						}
						(*v41).UnmarshalEasyJSON(in)
					}
					out.Sort = append(out.Sort, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo12(out *jwriter.Writer, in queryChannelRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"watch\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Watch))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Bool(bool(in.State))
	}
	{
		const prefix string = ",\"presence\":"
		out.RawString(prefix)
		out.Bool(bool(in.Presence))
	}
	if in.FilterConditions != nil {
		const prefix string = ",\"filter_conditions\":"
		out.RawString(prefix)
		(*in.FilterConditions).MarshalEasyJSON(out)
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v42, v43 := range in.Sort {
				if v42 > 0 {
					out.RawByte(',')
				}
				if v43 == nil {
					out.RawString("null")
				} else {
					(*v43).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo12(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo13(in *jlexer.Lexer, out *messageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo13(out *jwriter.Writer, in messageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo13(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo14(in *jlexer.Lexer, out *messageRequestUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo14(out *jwriter.Writer, in messageRequestUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequestUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequestUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequestUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequestUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo14(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo15(in *jlexer.Lexer, out *messageRequestMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.ExtraData {
			delete(out.ExtraData, key)
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v44 *Attachment
					if in.IsNull() {
						in.Skip()
						v44 = nil
					} else {
						if v44 == nil {
							v44 = new(Attachment)
						}
						(*v44).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make([]string, 0, 4)
					} else {
						out.MentionedUsers = []string{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.MentionedUsers = append(out.MentionedUsers, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent_id":
			out.ParentID = string(in.String())
		case "show_in_channel":
			out.ShowInChannel = bool(in.Bool())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo15(out *jwriter.Writer, in messageRequestMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.Attachments {
				if v46 > 0 {
					out.RawByte(',')
				}
				if v47 == nil {
					out.RawString("null")
				} else {
					(*v47).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.MentionedUsers {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"show_in_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowInChannel))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "text", "attachments", "user", "mentioned_users", "parent_id", "show_in_channel":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequestMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequestMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequestMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequestMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo15(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo16(in *jlexer.Lexer, out *messageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo16(out *jwriter.Writer, in messageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo16(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo17(in *jlexer.Lexer, out *eventRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(Event)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo17(out *jwriter.Writer, in eventRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		if in.Event == nil {
			out.RawString("null")
		} else {
			(*in.Event).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v eventRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v eventRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *eventRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *eventRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo17(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo18(in *jlexer.Lexer, out *devicesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*Device, 0, 8)
					} else {
						out.Devices = []*Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v50 *Device
					if in.IsNull() {
						in.Skip()
						v50 = nil
					} else {
						if v50 == nil {
							v50 = new(Device)
						}
						(*v50).UnmarshalEasyJSON(in)
					}
					out.Devices = append(out.Devices, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo18(out *jwriter.Writer, in devicesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devices\":"
		out.RawString(prefix[1:])
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Devices {
				if v51 > 0 {
					out.RawByte(',')
				}
				if v52 == nil {
					out.RawString("null")
				} else {
					(*v52).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v devicesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v devicesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *devicesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *devicesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo18(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo19(in *jlexer.Lexer, out *channelTypeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_types":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ChannelTypes = make(map[string]*ChannelType)
				} else {
					out.ChannelTypes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 *ChannelType
					if in.IsNull() {
						in.Skip()
						v53 = nil
					} else {
						if v53 == nil {
							v53 = new(ChannelType)
						}
						(*v53).UnmarshalEasyJSON(in)
					}
					(out.ChannelTypes)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo19(out *jwriter.Writer, in channelTypeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_types\":"
		out.RawString(prefix[1:])
		if in.ChannelTypes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.ChannelTypes {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v54Name))
				out.RawByte(':')
				if v54Value == nil {
					out.RawString("null")
				} else {
					(*v54Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo19(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo20(in *jlexer.Lexer, out *channelTypeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ChannelType = new(ChannelType)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]string, 0, 4)
					} else {
						out.Commands = []string{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.Commands = append(out.Commands, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v56 *Permission
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(Permission)
						}
						(*v56).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo20(out *jwriter.Writer, in channelTypeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.Commands {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.String(string(v58))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Permissions {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					(*v60).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo20(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo21(in *jlexer.Lexer, out *appResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(AppResponseFields)
				}
				(*out.App).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo21(out *jwriter.Writer, in appResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix[1:])
		if in.App == nil {
			out.RawString("null")
		} else {
			(*in.App).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v appResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v appResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *appResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *appResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo21(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo22(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.ExtraData {
			delete(out.ExtraData, key)
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]*Mute, 0, 8)
					} else {
						out.Mutes = []*Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *Mute
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(Mute)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					out.Mutes = append(out.Mutes, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "last_active":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastActive).UnmarshalJSON(data))
			}
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo22(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	{
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		if in.Mutes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Mutes {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					(*v63).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"last_active\":"
		out.RawString(prefix)
		out.Raw((in.LastActive).MarshalJSON())
	}
	for k, v := range in.ExtraData {
		switch k {
		case "id", "name", "image", "role", "online", "invisible", "mutes", "created_at", "updated_at", "last_active":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo22(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo23(in *jlexer.Lexer, out *SortOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "direction":
			out.Direction = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo23(out *jwriter.Writer, in SortOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.Int(int(in.Direction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SortOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SortOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SortOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SortOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo23(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo24(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.ExtraData {
			delete(out.ExtraData, key)
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo24(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "message_id", "user_id", "type":
			continue // don't allow field overwrites
		}
		out.RawByte(',')
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo24(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo25(in *jlexer.Lexer, out *QueryOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.Filter {
			delete(out.Filter, key)
		}
		switch key {
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		default:
			if out.Filter == nil {
				out.Filter = make(map[string]interface{})
			}
			out.Filter[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo25(out *jwriter.Writer, in QueryOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	for k, v := range in.Filter {
		switch k {
		case "limit", "offset":
			continue // don't allow field overwrites
		}
		if first {
			first = false
		} else {
			out.RawByte(',')
		}
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo25(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo26(in *jlexer.Lexer, out *PushNotificationFields) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apn":
			(out.APNConfig).UnmarshalEasyJSON(in)
		case "firebase":
			(out.FirebaseConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo26(out *jwriter.Writer, in PushNotificationFields) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apn\":"
		out.RawString(prefix[1:])
		(in.APNConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"firebase\":"
		out.RawString(prefix)
		(in.FirebaseConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushNotificationFields) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushNotificationFields) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushNotificationFields) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushNotificationFields) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo26(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo27(in *jlexer.Lexer, out *Policy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.Resources = append(out.Resources, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.Roles = append(out.Roles, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			out.Action = int(in.Int())
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo27(out *jwriter.Writer, in Policy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.Resources {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.String(string(v67))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Roles {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Int(int(in.Action))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Policy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Policy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Policy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Policy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo27(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo28(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.Resources = append(out.Resources, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					v71 = string(in.String())
					out.Roles = append(out.Roles, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo28(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v72, v73 := range in.Resources {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Roles {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo28(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo29(in *jlexer.Lexer, out *Mute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "target":
			(out.Target).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo29(out *jwriter.Writer, in Mute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		(in.Target).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo29(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo30(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "html":
			out.HTML = string(in.String())
		case "type":
			out.Type = MessageType(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v76 *Attachment
					if in.IsNull() {
						in.Skip()
						v76 = nil
					} else {
						if v76 == nil {
							v76 = new(Attachment)
						}
						(*v76).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latest_reactions":
			if in.IsNull() {
				in.Skip()
				out.LatestReactions = nil
			} else {
				in.Delim('[')
				if out.LatestReactions == nil {
					if !in.IsDelim(']') {
						out.LatestReactions = make([]*Reaction, 0, 8)
					} else {
						out.LatestReactions = []*Reaction{}
					}
				} else {
					out.LatestReactions = (out.LatestReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v77 *Reaction
					if in.IsNull() {
						in.Skip()
						v77 = nil
					} else {
						if v77 == nil {
							v77 = new(Reaction)
						}
						(*v77).UnmarshalEasyJSON(in)
					}
					out.LatestReactions = append(out.LatestReactions, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "own_reactions":
			if in.IsNull() {
				in.Skip()
				out.OwnReactions = nil
			} else {
				in.Delim('[')
				if out.OwnReactions == nil {
					if !in.IsDelim(']') {
						out.OwnReactions = make([]*Reaction, 0, 8)
					} else {
						out.OwnReactions = []*Reaction{}
					}
				} else {
					out.OwnReactions = (out.OwnReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v78 *Reaction
					if in.IsNull() {
						in.Skip()
						v78 = nil
					} else {
						if v78 == nil {
							v78 = new(Reaction)
						}
						(*v78).UnmarshalEasyJSON(in)
					}
					out.OwnReactions = append(out.OwnReactions, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reaction_counts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ReactionCounts = make(map[string]int)
				} else {
					out.ReactionCounts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v79 int
					v79 = int(in.Int())
					(out.ReactionCounts)[key] = v79
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent_id":
			out.ParentID = string(in.String())
		case "show_in_channel":
			out.ShowInChannel = bool(in.Bool())
		case "reply_count":
			out.ReplyCount = int(in.Int())
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make([]*User, 0, 8)
					} else {
						out.MentionedUsers = []*User{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v80 *User
					if in.IsNull() {
						in.Skip()
						v80 = nil
					} else {
						if v80 == nil {
							v80 = new(User)
						}
						(*v80).UnmarshalEasyJSON(in)
					}
					out.MentionedUsers = append(out.MentionedUsers, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "ExtraData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExtraData = make(map[string]interface{})
				} else {
					out.ExtraData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v81 interface{}
					if m, ok := v81.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v81.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v81 = in.Interface()
					}
					(out.ExtraData)[key] = v81
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo30(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v82, v83 := range in.Attachments {
				if v82 > 0 {
					out.RawByte(',')
				}
				if v83 == nil {
					out.RawString("null")
				} else {
					(*v83).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latest_reactions\":"
		out.RawString(prefix)
		if in.LatestReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.LatestReactions {
				if v84 > 0 {
					out.RawByte(',')
				}
				if v85 == nil {
					out.RawString("null")
				} else {
					(*v85).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"own_reactions\":"
		out.RawString(prefix)
		if in.OwnReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.OwnReactions {
				if v86 > 0 {
					out.RawByte(',')
				}
				if v87 == nil {
					out.RawString("null")
				} else {
					(*v87).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reaction_counts\":"
		out.RawString(prefix)
		if in.ReactionCounts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v88First := true
			for v88Name, v88Value := range in.ReactionCounts {
				if v88First {
					v88First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v88Name))
				out.RawByte(':')
				out.Int(int(v88Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"show_in_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowInChannel))
	}
	{
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyCount))
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.MentionedUsers {
				if v89 > 0 {
					out.RawByte(',')
				}
				if v90 == nil {
					out.RawString("null")
				} else {
					(*v90).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"ExtraData\":"
		out.RawString(prefix)
		if in.ExtraData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v91First := true
			for v91Name, v91Value := range in.ExtraData {
				if v91First {
					v91First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v91Name))
				out.RawByte(':')
				if m, ok := v91Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v91Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v91Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo30(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo31(in *jlexer.Lexer, out *FirebaseConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "notification_template":
			out.NotificationTemplate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo31(out *jwriter.Writer, in FirebaseConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"notification_template\":"
		out.RawString(prefix)
		out.String(string(in.NotificationTemplate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FirebaseConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FirebaseConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FirebaseConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FirebaseConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo31(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo32(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cid":
			out.CID = string(in.String())
		case "type":
			out.Type = EventType(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "member":
			if in.IsNull() {
				in.Skip()
				out.Member = nil
			} else {
				if out.Member == nil {
					out.Member = new(ChannelMember)
				}
				(*out.Member).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserID = string(in.String())
		case "me":
			if in.IsNull() {
				in.Skip()
				out.OwnUser = nil
			} else {
				if out.OwnUser == nil {
					out.OwnUser = new(User)
				}
				(*out.OwnUser).UnmarshalEasyJSON(in)
			}
		case "watcher_count":
			out.WatcherCount = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo32(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CID != "" {
		const prefix string = ",\"cid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Reaction != nil {
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		(*in.Reaction).MarshalEasyJSON(out)
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		(*in.Channel).MarshalEasyJSON(out)
	}
	if in.Member != nil {
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(*in.Member).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(*in.User).MarshalEasyJSON(out)
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	if in.OwnUser != nil {
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		(*in.OwnUser).MarshalEasyJSON(out)
	}
	if in.WatcherCount != 0 {
		const prefix string = ",\"watcher_count\":"
		out.RawString(prefix)
		out.Int(int(in.WatcherCount))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo32(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo33(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "push_provider":
			out.PushProvider = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo33(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"push_provider\":"
		out.RawString(prefix)
		out.String(string(in.PushProvider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo33(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo34(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "args":
			out.Args = string(in.String())
		case "set":
			out.Set = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo34(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		out.String(string(in.Args))
	}
	{
		const prefix string = ",\"set\":"
		out.RawString(prefix)
		out.String(string(in.Set))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo34(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo35(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BaseURL":
			out.BaseURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo35(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BaseURL\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo35(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo36(in *jlexer.Lexer, out *ChannelType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]*Command, 0, 8)
					} else {
						out.Commands = []*Command{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v92 *Command
					if in.IsNull() {
						in.Skip()
						v92 = nil
					} else {
						if v92 == nil {
							v92 = new(Command)
						}
						(*v92).UnmarshalEasyJSON(in)
					}
					out.Commands = append(out.Commands, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v93 *Permission
					if in.IsNull() {
						in.Skip()
						v93 = nil
					} else {
						if v93 == nil {
							v93 = new(Permission)
						}
						(*v93).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo36(out *jwriter.Writer, in ChannelType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v94, v95 := range in.Commands {
				if v94 > 0 {
					out.RawByte(',')
				}
				if v95 == nil {
					out.RawString("null")
				} else {
					(*v95).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.Permissions {
				if v96 > 0 {
					out.RawByte(',')
				}
				if v97 == nil {
					out.RawString("null")
				} else {
					(*v97).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo36(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo37(in *jlexer.Lexer, out *ChannelRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "last_read":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRead).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo37(out *jwriter.Writer, in ChannelRead) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"last_read\":"
		out.RawString(prefix)
		out.Raw((in.LastRead).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo37(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo38(in *jlexer.Lexer, out *ChannelMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "is_moderator":
			out.IsModerator = bool(in.Bool())
		case "invited":
			out.Invited = bool(in.Bool())
		case "invite_accepted_at":
			if in.IsNull() {
				in.Skip()
				out.InviteAcceptedAt = nil
			} else {
				if out.InviteAcceptedAt == nil {
					out.InviteAcceptedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteAcceptedAt).UnmarshalJSON(data))
				}
			}
		case "invite_rejected_at":
			if in.IsNull() {
				in.Skip()
				out.InviteRejectedAt = nil
			} else {
				if out.InviteRejectedAt == nil {
					out.InviteRejectedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteRejectedAt).UnmarshalJSON(data))
				}
			}
		case "role":
			out.Role = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo38(out *jwriter.Writer, in ChannelMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.IsModerator {
		const prefix string = ",\"is_moderator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsModerator))
	}
	if in.Invited {
		const prefix string = ",\"invited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Invited))
	}
	if in.InviteAcceptedAt != nil {
		const prefix string = ",\"invite_accepted_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteAcceptedAt).MarshalJSON())
	}
	if in.InviteRejectedAt != nil {
		const prefix string = ",\"invite_rejected_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteRejectedAt).MarshalJSON())
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo38(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo39(in *jlexer.Lexer, out *ChannelConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo39(out *jwriter.Writer, in ChannelConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo39(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo40(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "cid":
			out.CID = string(in.String())
		case "config":
			(out.Config).UnmarshalEasyJSON(in)
		case "created_by":
			if in.IsNull() {
				in.Skip()
				out.CreatedBy = nil
			} else {
				if out.CreatedBy == nil {
					out.CreatedBy = new(User)
				}
				(*out.CreatedBy).UnmarshalEasyJSON(in)
			}
		case "frozen":
			out.Frozen = bool(in.Bool())
		case "member_count":
			out.MemberCount = int(in.Int())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v98 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v98 = nil
					} else {
						if v98 == nil {
							v98 = new(ChannelMember)
						}
						(*v98).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v99 *Message
					if in.IsNull() {
						in.Skip()
						v99 = nil
					} else {
						if v99 == nil {
							v99 = new(Message)
						}
						(*v99).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v100 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v100 = nil
					} else {
						if v100 == nil {
							v100 = new(ChannelRead)
						}
						(*v100).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "last_message_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMessageAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo40(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		(in.Config).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		if in.CreatedBy == nil {
			out.RawString("null")
		} else {
			(*in.CreatedBy).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"frozen\":"
		out.RawString(prefix)
		out.Bool(bool(in.Frozen))
	}
	{
		const prefix string = ",\"member_count\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.Members {
				if v101 > 0 {
					out.RawByte(',')
				}
				if v102 == nil {
					out.RawString("null")
				} else {
					(*v102).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v103, v104 := range in.Messages {
				if v103 > 0 {
					out.RawByte(',')
				}
				if v104 == nil {
					out.RawString("null")
				} else {
					(*v104).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v105, v106 := range in.Read {
				if v105 > 0 {
					out.RawByte(',')
				}
				if v106 == nil {
					out.RawString("null")
				} else {
					(*v106).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"last_message_at\":"
		out.RawString(prefix)
		out.Raw((in.LastMessageAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo40(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo41(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		for key := range out.ExtraData {
			delete(out.ExtraData, key)
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "author_name":
			out.AuthorName = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "title_link":
			out.TitleLink = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "image_url":
			out.ImageURL = string(in.String())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "asset_url":
			out.AssetURL = string(in.String())
		case "og_scrape_url":
			out.OGScrapeURL = string(in.String())
		default:
			if out.ExtraData == nil {
				out.ExtraData = make(map[string]interface{})
			}
			out.ExtraData[key] = in.Interface()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo41(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.AuthorName != "" {
		const prefix string = ",\"author_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorName))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TitleLink != "" {
		const prefix string = ",\"title_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleLink))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageURL))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.AssetURL != "" {
		const prefix string = ",\"asset_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AssetURL))
	}
	if in.OGScrapeURL != "" {
		const prefix string = ",\"og_scrape_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OGScrapeURL))
	}
	for k, v := range in.ExtraData {
		switch k {
		case "type", "author_name", "title", "title_link", "text", "image_url", "thumb_url", "asset_url", "og_scrape_url":
			continue // don't allow field overwrites
		}
		if first {
			first = false
		} else {
			out.RawByte(',')
		}
		out.String(string(k))
		out.RawByte(':')
		if m, ok := v.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := v.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(v))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo41(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo42(in *jlexer.Lexer, out *AppSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disable_auth_checks":
			if in.IsNull() {
				in.Skip()
				out.DisableAuth = nil
			} else {
				if out.DisableAuth == nil {
					out.DisableAuth = new(bool)
				}
				*out.DisableAuth = bool(in.Bool())
			}
		case "disable_permissions_checks":
			if in.IsNull() {
				in.Skip()
				out.DisablePermissions = nil
			} else {
				if out.DisablePermissions == nil {
					out.DisablePermissions = new(bool)
				}
				*out.DisablePermissions = bool(in.Bool())
			}
		case "apn_config":
			if in.IsNull() {
				in.Skip()
				out.APNConfig = nil
			} else {
				if out.APNConfig == nil {
					out.APNConfig = new(APNConfig)
				}
				(*out.APNConfig).UnmarshalEasyJSON(in)
			}
		case "firebase_config":
			if in.IsNull() {
				in.Skip()
				out.FirebaseConfig = nil
			} else {
				if out.FirebaseConfig == nil {
					out.FirebaseConfig = new(FirebaseConfig)
				}
				(*out.FirebaseConfig).UnmarshalEasyJSON(in)
			}
		case "webhook_url":
			if in.IsNull() {
				in.Skip()
				out.WebhookURL = nil
			} else {
				if out.WebhookURL == nil {
					out.WebhookURL = new(string)
				}
				*out.WebhookURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo42(out *jwriter.Writer, in AppSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisableAuth != nil {
		const prefix string = ",\"disable_auth_checks\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.DisableAuth))
	}
	if in.DisablePermissions != nil {
		const prefix string = ",\"disable_permissions_checks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DisablePermissions))
	}
	if in.APNConfig != nil {
		const prefix string = ",\"apn_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.APNConfig).MarshalEasyJSON(out)
	}
	if in.FirebaseConfig != nil {
		const prefix string = ",\"firebase_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FirebaseConfig).MarshalEasyJSON(out)
	}
	if in.WebhookURL != nil {
		const prefix string = ",\"webhook_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WebhookURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo42(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo43(in *jlexer.Lexer, out *AppResponseFields) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "organization":
			out.OrganizationName = string(in.String())
		case "push_notifications":
			(out.PushNotifications).UnmarshalEasyJSON(in)
		case "webhook_url":
			out.WebhookURL = string(in.String())
		case "channel_configs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ConfigNameMap = make(map[string]*ChannelConfig)
				} else {
					out.ConfigNameMap = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v107 *ChannelConfig
					if in.IsNull() {
						in.Skip()
						v107 = nil
					} else {
						if v107 == nil {
							v107 = new(ChannelConfig)
						}
						(*v107).UnmarshalEasyJSON(in)
					}
					(out.ConfigNameMap)[key] = v107
					in.WantComma()
				}
				in.Delim('}')
			}
		case "policies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Policies = make(map[string][]Policy)
				} else {
					out.Policies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v108 []Policy
					if in.IsNull() {
						in.Skip()
						v108 = nil
					} else {
						in.Delim('[')
						if v108 == nil {
							if !in.IsDelim(']') {
								v108 = make([]Policy, 0, 0)
							} else {
								v108 = []Policy{}
							}
						} else {
							v108 = (v108)[:0]
						}
						for !in.IsDelim(']') {
							var v109 Policy
							(v109).UnmarshalEasyJSON(in)
							v108 = append(v108, v109)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Policies)[key] = v108
					in.WantComma()
				}
				in.Delim('}')
			}
		case "suspended":
			out.Suspended = bool(in.Bool())
		case "suspended_explanation":
			out.SuspendedExplanation = string(in.String())
		case "disable_auth_checks":
			out.DisableAuth = bool(in.Bool())
		case "disable_permissions_checks":
			out.DisablePermissions = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo43(out *jwriter.Writer, in AppResponseFields) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"push_notifications\":"
		out.RawString(prefix)
		(in.PushNotifications).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"webhook_url\":"
		out.RawString(prefix)
		out.String(string(in.WebhookURL))
	}
	{
		const prefix string = ",\"channel_configs\":"
		out.RawString(prefix)
		if in.ConfigNameMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v110First := true
			for v110Name, v110Value := range in.ConfigNameMap {
				if v110First {
					v110First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v110Name))
				out.RawByte(':')
				if v110Value == nil {
					out.RawString("null")
				} else {
					(*v110Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"policies\":"
		out.RawString(prefix)
		if in.Policies == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v111First := true
			for v111Name, v111Value := range in.Policies {
				if v111First {
					v111First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v111Name))
				out.RawByte(':')
				if v111Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v112, v113 := range v111Value {
						if v112 > 0 {
							out.RawByte(',')
						}
						(v113).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"suspended\":"
		out.RawString(prefix)
		out.Bool(bool(in.Suspended))
	}
	{
		const prefix string = ",\"suspended_explanation\":"
		out.RawString(prefix)
		out.String(string(in.SuspendedExplanation))
	}
	{
		const prefix string = ",\"disable_auth_checks\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisableAuth))
	}
	{
		const prefix string = ",\"disable_permissions_checks\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisablePermissions))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppResponseFields) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppResponseFields) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppResponseFields) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppResponseFields) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo43(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGo44(in *jlexer.Lexer, out *APNConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "development":
			out.Development = bool(in.Bool())
		case "auth_type":
			out.AuthType = string(in.String())
		case "notification_template":
			out.NotificationTemplate = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "bundle_id":
			out.BundleID = string(in.String())
		case "team_id":
			out.TeamID = string(in.String())
		case "key_id":
			out.KeyID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGo44(out *jwriter.Writer, in APNConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"development\":"
		out.RawString(prefix)
		out.Bool(bool(in.Development))
	}
	if in.AuthType != "" {
		const prefix string = ",\"auth_type\":"
		out.RawString(prefix)
		out.String(string(in.AuthType))
	}
	{
		const prefix string = ",\"notification_template\":"
		out.RawString(prefix)
		out.String(string(in.NotificationTemplate))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	if in.BundleID != "" {
		const prefix string = ",\"bundle_id\":"
		out.RawString(prefix)
		out.String(string(in.BundleID))
	}
	if in.TeamID != "" {
		const prefix string = ",\"team_id\":"
		out.RawString(prefix)
		out.String(string(in.TeamID))
	}
	if in.KeyID != "" {
		const prefix string = ",\"key_id\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APNConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APNConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGo44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APNConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APNConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGo44(l, v)
}
