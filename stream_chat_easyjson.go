// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package stream_chat

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	multipart "mime/multipart"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV2(in *jlexer.Lexer, out *usersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Users = make(map[string]*User)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *User
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(User)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Users)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV2(out *jwriter.Writer, in usersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Users {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV2(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV21(in *jlexer.Lexer, out *usersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Users = make(map[string]userRequest)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 userRequest
					(v3).UnmarshalEasyJSON(in)
					(out.Users)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV21(out *jwriter.Writer, in usersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Users {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				(v4Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV21(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV22(in *jlexer.Lexer, out *userRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.User = new(User)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]*Mute, 0, 8)
					} else {
						out.Mutes = []*Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Mute
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Mute)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Mutes = append(out.Mutes, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_mutes":
			if in.IsNull() {
				in.Skip()
				out.ChannelMutes = nil
			} else {
				in.Delim('[')
				if out.ChannelMutes == nil {
					if !in.IsDelim(']') {
						out.ChannelMutes = make([]*ChannelMute, 0, 8)
					} else {
						out.ChannelMutes = []*ChannelMute{}
					}
				} else {
					out.ChannelMutes = (out.ChannelMutes)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *ChannelMute
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(ChannelMute)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.ChannelMutes = append(out.ChannelMutes, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV22(out *jwriter.Writer, in userRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	if in.Online {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	if in.Invisible {
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	if len(in.Mutes) != 0 {
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v7, v8 := range in.Mutes {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					(*v8).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ChannelMutes) != 0 {
		const prefix string = ",\"channel_mutes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v9, v10 := range in.ChannelMutes {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV22(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV23(in *jlexer.Lexer, out *sendFileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			out.File = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV23(out *jwriter.Writer, in sendFileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		out.String(string(in.File))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sendFileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sendFileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sendFileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sendFileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV23(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV24(in *jlexer.Lexer, out *sendActionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "form_data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FormData = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 string
					v11 = string(in.String())
					(out.FormData)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV24(out *jwriter.Writer, in sendActionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"form_data\":"
		out.RawString(prefix)
		if in.FormData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.FormData {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.String(string(v12Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sendActionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sendActionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sendActionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sendActionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV24(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV25(in *jlexer.Lexer, out *searchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]searchMessageResponse, 0, 8)
					} else {
						out.Results = []searchMessageResponse{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v13 searchMessageResponse
					(v13).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV25(out *jwriter.Writer, in searchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Results {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v searchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *searchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV25(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV26(in *jlexer.Lexer, out *searchMessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV26(out *jwriter.Writer, in searchMessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v searchMessageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchMessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *searchMessageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchMessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV26(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV27(in *jlexer.Lexer, out *repliesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *Message
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(Message)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV27(out *jwriter.Writer, in repliesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Messages {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v repliesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v repliesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *repliesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *repliesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV27(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV28(in *jlexer.Lexer, out *reactionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*Reaction, 0, 8)
					} else {
						out.Reactions = []*Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *Reaction
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(Reaction)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Reactions = append(out.Reactions, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV28(out *jwriter.Writer, in reactionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix[1:])
		if in.Reactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Reactions {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV28(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV29(in *jlexer.Lexer, out *reactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV29(out *jwriter.Writer, in reactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV29(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV210(in *jlexer.Lexer, out *reactionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV210(out *jwriter.Writer, in reactionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix[1:])
		if in.Reaction == nil {
			out.RawString("null")
		} else {
			(*in.Reaction).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reactionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV210(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reactionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV210(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reactionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV210(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reactionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV210(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV211(in *jlexer.Lexer, out *queryUsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *User
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(User)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV211(out *jwriter.Writer, in queryUsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Users {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryUsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV211(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryUsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV211(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryUsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV211(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryUsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV211(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV212(in *jlexer.Lexer, out *queryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *Message
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Message)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(ChannelMember)
						}
						(*v26).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(ChannelRead)
						}
						(*v27).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV212(out *jwriter.Writer, in queryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Channel).MarshalEasyJSON(out)
	}
	if len(in.Messages) != 0 {
		const prefix string = ",\"messages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Messages {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					(*v29).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Members {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					(*v31).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Read) != 0 {
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Read {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV212(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV212(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV212(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV212(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV213(in *jlexer.Lexer, out *queryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "watch":
			out.Watch = bool(in.Bool())
		case "state":
			out.State = bool(in.Bool())
		case "presence":
			out.Presence = bool(in.Bool())
		case "user_id":
			out.UserID = string(in.String())
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FilterConditions = make(map[string]interface{})
				} else {
					out.FilterConditions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 interface{}
					if m, ok := v34.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v34.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v34 = in.Interface()
					}
					(out.FilterConditions)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]*SortOption, 0, 8)
					} else {
						out.Sort = []*SortOption{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *SortOption
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(SortOption)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.Sort = append(out.Sort, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV213(out *jwriter.Writer, in queryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"watch\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Watch))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Bool(bool(in.State))
	}
	{
		const prefix string = ",\"presence\":"
		out.RawString(prefix)
		out.Bool(bool(in.Presence))
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	if len(in.FilterConditions) != 0 {
		const prefix string = ",\"filter_conditions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.FilterConditions {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				if m, ok := v36Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v36Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v36Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v37, v38 := range in.Sort {
				if v37 > 0 {
					out.RawByte(',')
				}
				if v38 == nil {
					out.RawString("null")
				} else {
					(*v38).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV213(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV213(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV213(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV213(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV214(in *jlexer.Lexer, out *queryChannelResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v39 *Message
					if in.IsNull() {
						in.Skip()
						v39 = nil
					} else {
						if v39 == nil {
							v39 = new(Message)
						}
						(*v39).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(ChannelRead)
						}
						(*v40).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(ChannelMember)
						}
						(*v41).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV214(out *jwriter.Writer, in queryChannelResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		if in.Channel == nil {
			out.RawString("null")
		} else {
			(*in.Channel).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Messages {
				if v42 > 0 {
					out.RawByte(',')
				}
				if v43 == nil {
					out.RawString("null")
				} else {
					(*v43).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Read {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.Members {
				if v46 > 0 {
					out.RawByte(',')
				}
				if v47 == nil {
					out.RawString("null")
				} else {
					(*v47).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV214(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV214(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV214(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV214(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV215(in *jlexer.Lexer, out *queryChannelResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]queryChannelResponseData, 0, 1)
					} else {
						out.Channels = []queryChannelResponseData{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v48 queryChannelResponseData
					(v48).UnmarshalEasyJSON(in)
					out.Channels = append(out.Channels, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV215(out *jwriter.Writer, in queryChannelResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix[1:])
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Channels {
				if v49 > 0 {
					out.RawByte(',')
				}
				(v50).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryChannelResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV215(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryChannelResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV215(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryChannelResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV215(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryChannelResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV215(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV216(in *jlexer.Lexer, out *partialUserUpdateReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]PartialUserUpdate, 0, 1)
					} else {
						out.Users = []PartialUserUpdate{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v51 PartialUserUpdate
					(v51).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV216(out *jwriter.Writer, in partialUserUpdateReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.Users {
				if v52 > 0 {
					out.RawByte(',')
				}
				(v53).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v partialUserUpdateReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV216(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v partialUserUpdateReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV216(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *partialUserUpdateReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV216(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *partialUserUpdateReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV216(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV217(in *jlexer.Lexer, out *multipartForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Writer = new(multipart.Writer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV217(out *jwriter.Writer, in multipartForm) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v multipartForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV217(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v multipartForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV217(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *multipartForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV217(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *multipartForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV217(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV218(in *jlexer.Lexer, out *messageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV218(out *jwriter.Writer, in messageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV218(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV218(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV218(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV218(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV219(in *jlexer.Lexer, out *messageRequestUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV219(out *jwriter.Writer, in messageRequestUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequestUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV219(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequestUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV219(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequestUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV219(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequestUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV219(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV220(in *jlexer.Lexer, out *messageRequestMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v54 *Attachment
					if in.IsNull() {
						in.Skip()
						v54 = nil
					} else {
						if v54 == nil {
							v54 = new(Attachment)
						}
						(*v54).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make([]string, 0, 4)
					} else {
						out.MentionedUsers = []string{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.MentionedUsers = append(out.MentionedUsers, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent_id":
			out.ParentID = string(in.String())
		case "show_in_channel":
			out.ShowInChannel = bool(in.Bool())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV220(out *jwriter.Writer, in messageRequestMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Attachments {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					(*v57).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.MentionedUsers {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"show_in_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowInChannel))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequestMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV220(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequestMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV220(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequestMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV220(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequestMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV220(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV221(in *jlexer.Lexer, out *messageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV221(out *jwriter.Writer, in messageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		(in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v messageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV221(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v messageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV221(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *messageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV221(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *messageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV221(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV222(in *jlexer.Lexer, out *eventRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(Event)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV222(out *jwriter.Writer, in eventRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		if in.Event == nil {
			out.RawString("null")
		} else {
			(*in.Event).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v eventRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV222(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v eventRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV222(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *eventRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV222(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *eventRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV222(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV223(in *jlexer.Lexer, out *devicesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*Device, 0, 8)
					} else {
						out.Devices = []*Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v60 *Device
					if in.IsNull() {
						in.Skip()
						v60 = nil
					} else {
						if v60 == nil {
							v60 = new(Device)
						}
						(*v60).UnmarshalEasyJSON(in)
					}
					out.Devices = append(out.Devices, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV223(out *jwriter.Writer, in devicesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devices\":"
		out.RawString(prefix[1:])
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.Devices {
				if v61 > 0 {
					out.RawByte(',')
				}
				if v62 == nil {
					out.RawString("null")
				} else {
					(*v62).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v devicesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV223(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v devicesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV223(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *devicesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV223(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *devicesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV223(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV224(in *jlexer.Lexer, out *channelTypeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_types":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ChannelTypes = make(map[string]*ChannelType)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v63 *ChannelType
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						if v63 == nil {
							v63 = new(ChannelType)
						}
						(*v63).UnmarshalEasyJSON(in)
					}
					(out.ChannelTypes)[key] = v63
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV224(out *jwriter.Writer, in channelTypeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_types\":"
		out.RawString(prefix[1:])
		if in.ChannelTypes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v64First := true
			for v64Name, v64Value := range in.ChannelTypes {
				if v64First {
					v64First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v64Name))
				out.RawByte(':')
				if v64Value == nil {
					out.RawString("null")
				} else {
					(*v64Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV224(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV224(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV224(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV224(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV225(in *jlexer.Lexer, out *channelTypeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ChannelType = new(ChannelType)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]string, 0, 4)
					} else {
						out.Commands = []string{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.Commands = append(out.Commands, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v66 *Permission
					if in.IsNull() {
						in.Skip()
						v66 = nil
					} else {
						if v66 == nil {
							v66 = new(Permission)
						}
						(*v66).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV225(out *jwriter.Writer, in channelTypeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.Commands {
				if v67 > 0 {
					out.RawByte(',')
				}
				out.String(string(v68))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v69, v70 := range in.Permissions {
				if v69 > 0 {
					out.RawByte(',')
				}
				if v70 == nil {
					out.RawString("null")
				} else {
					(*v70).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v channelTypeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV225(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v channelTypeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV225(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *channelTypeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV225(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *channelTypeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV225(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV226(in *jlexer.Lexer, out *appResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(AppConfig)
				}
				(*out.App).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV226(out *jwriter.Writer, in appResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix[1:])
		if in.App == nil {
			out.RawString("null")
		} else {
			(*in.App).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v appResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV226(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v appResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV226(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *appResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV226(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *appResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV226(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV227(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "online":
			out.Online = bool(in.Bool())
		case "invisible":
			out.Invisible = bool(in.Bool())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		case "last_active":
			if in.IsNull() {
				in.Skip()
				out.LastActive = nil
			} else {
				if out.LastActive == nil {
					out.LastActive = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastActive).UnmarshalJSON(data))
				}
			}
		case "mutes":
			if in.IsNull() {
				in.Skip()
				out.Mutes = nil
			} else {
				in.Delim('[')
				if out.Mutes == nil {
					if !in.IsDelim(']') {
						out.Mutes = make([]*Mute, 0, 8)
					} else {
						out.Mutes = []*Mute{}
					}
				} else {
					out.Mutes = (out.Mutes)[:0]
				}
				for !in.IsDelim(']') {
					var v71 *Mute
					if in.IsNull() {
						in.Skip()
						v71 = nil
					} else {
						if v71 == nil {
							v71 = new(Mute)
						}
						(*v71).UnmarshalEasyJSON(in)
					}
					out.Mutes = append(out.Mutes, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_mutes":
			if in.IsNull() {
				in.Skip()
				out.ChannelMutes = nil
			} else {
				in.Delim('[')
				if out.ChannelMutes == nil {
					if !in.IsDelim(']') {
						out.ChannelMutes = make([]*ChannelMute, 0, 8)
					} else {
						out.ChannelMutes = []*ChannelMute{}
					}
				} else {
					out.ChannelMutes = (out.ChannelMutes)[:0]
				}
				for !in.IsDelim(']') {
					var v72 *ChannelMute
					if in.IsNull() {
						in.Skip()
						v72 = nil
					} else {
						if v72 == nil {
							v72 = new(ChannelMute)
						}
						(*v72).UnmarshalEasyJSON(in)
					}
					out.ChannelMutes = append(out.ChannelMutes, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV227(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	if in.Online {
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		out.Bool(bool(in.Online))
	}
	if in.Invisible {
		const prefix string = ",\"invisible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Invisible))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((*in.UpdatedAt).MarshalJSON())
	}
	if in.LastActive != nil {
		const prefix string = ",\"last_active\":"
		out.RawString(prefix)
		out.Raw((*in.LastActive).MarshalJSON())
	}
	if len(in.Mutes) != 0 {
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v73, v74 := range in.Mutes {
				if v73 > 0 {
					out.RawByte(',')
				}
				if v74 == nil {
					out.RawString("null")
				} else {
					(*v74).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ChannelMutes) != 0 {
		const prefix string = ",\"channel_mutes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v75, v76 := range in.ChannelMutes {
				if v75 > 0 {
					out.RawByte(',')
				}
				if v76 == nil {
					out.RawString("null")
				} else {
					(*v76).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV227(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV227(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV227(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV227(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV228(in *jlexer.Lexer, out *SortOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "direction":
			out.Direction = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV228(out *jwriter.Writer, in SortOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.Int(int(in.Direction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SortOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV228(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SortOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV228(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SortOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV228(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SortOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV228(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV229(in *jlexer.Lexer, out *SendFileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FileName":
			out.FileName = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "ContentType":
			out.ContentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV229(out *jwriter.Writer, in SendFileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FileName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendFileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV229(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendFileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV229(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendFileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV229(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendFileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV229(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV230(in *jlexer.Lexer, out *SearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Filters = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v77 interface{}
					if m, ok := v77.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v77.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v77 = in.Interface()
					}
					(out.Filters)[key] = v77
					in.WantComma()
				}
				in.Delim('}')
			}
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV230(out *jwriter.Writer, in SearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"filter_conditions\":"
		out.RawString(prefix)
		if in.Filters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.Filters {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v78Name))
				out.RawByte(':')
				if m, ok := v78Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v78Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v78Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV230(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV230(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV230(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV230(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV231(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			out.MessageID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV231(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV231(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV231(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV231(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV231(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV232(in *jlexer.Lexer, out *QueryOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filter_conditions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Filter = make(map[string]interface{})
				} else {
					out.Filter = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v79 interface{}
					if m, ok := v79.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v79.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v79 = in.Interface()
					}
					(out.Filter)[key] = v79
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]*SortOption, 0, 8)
					} else {
						out.Sort = []*SortOption{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v80 *SortOption
					if in.IsNull() {
						in.Skip()
						v80 = nil
					} else {
						if v80 == nil {
							v80 = new(SortOption)
						}
						(*v80).UnmarshalEasyJSON(in)
					}
					out.Sort = append(out.Sort, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_id":
			out.UserID = string(in.String())
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV232(out *jwriter.Writer, in QueryOption) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Filter) != 0 {
		const prefix string = ",\"filter_conditions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.Filter {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v81Name))
				out.RawByte(':')
				if m, ok := v81Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v81Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v81Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v82, v83 := range in.Sort {
				if v82 > 0 {
					out.RawByte(',')
				}
				if v83 == nil {
					out.RawString("null")
				} else {
					(*v83).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV232(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV232(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV232(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV232(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV233(in *jlexer.Lexer, out *PushNotificationFields) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apn":
			(out.APNConfig).UnmarshalEasyJSON(in)
		case "firebase":
			(out.FirebaseConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV233(out *jwriter.Writer, in PushNotificationFields) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apn\":"
		out.RawString(prefix[1:])
		(in.APNConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"firebase\":"
		out.RawString(prefix)
		(in.FirebaseConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushNotificationFields) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV233(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushNotificationFields) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV233(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushNotificationFields) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV233(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushNotificationFields) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV233(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV234(in *jlexer.Lexer, out *Policy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.Resources = append(out.Resources, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.Roles = append(out.Roles, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			out.Action = int(in.Int())
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV234(out *jwriter.Writer, in Policy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Resources {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.String(string(v87))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v88, v89 := range in.Roles {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Int(int(in.Action))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Policy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV234(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Policy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV234(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Policy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV234(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Policy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV234(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV235(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v90 string
					v90 = string(in.String())
					out.Resources = append(out.Resources, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v91 string
					v91 = string(in.String())
					out.Roles = append(out.Roles, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owner":
			out.Owner = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV235(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.Resources {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v94, v95 := range in.Roles {
				if v94 > 0 {
					out.RawByte(',')
				}
				out.String(string(v95))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV235(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV235(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV235(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV235(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV236(in *jlexer.Lexer, out *PartialUserUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "set":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Set = make(map[string]interface{})
				} else {
					out.Set = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v96 interface{}
					if m, ok := v96.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v96.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v96 = in.Interface()
					}
					(out.Set)[key] = v96
					in.WantComma()
				}
				in.Delim('}')
			}
		case "unset":
			if in.IsNull() {
				in.Skip()
				out.Unset = nil
			} else {
				in.Delim('[')
				if out.Unset == nil {
					if !in.IsDelim(']') {
						out.Unset = make([]string, 0, 4)
					} else {
						out.Unset = []string{}
					}
				} else {
					out.Unset = (out.Unset)[:0]
				}
				for !in.IsDelim(']') {
					var v97 string
					v97 = string(in.String())
					out.Unset = append(out.Unset, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV236(out *jwriter.Writer, in PartialUserUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Set) != 0 {
		const prefix string = ",\"set\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v98First := true
			for v98Name, v98Value := range in.Set {
				if v98First {
					v98First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v98Name))
				out.RawByte(':')
				if m, ok := v98Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v98Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v98Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Unset) != 0 {
		const prefix string = ",\"unset\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v99, v100 := range in.Unset {
				if v99 > 0 {
					out.RawByte(',')
				}
				out.String(string(v100))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PartialUserUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV236(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartialUserUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV236(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PartialUserUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV236(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartialUserUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV236(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV237(in *jlexer.Lexer, out *Mute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "target":
			(out.Target).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV237(out *jwriter.Writer, in Mute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		(in.Target).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV237(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV237(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV237(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV237(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV238(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "html":
			out.HTML = string(in.String())
		case "type":
			out.Type = MessageType(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v101 *Attachment
					if in.IsNull() {
						in.Skip()
						v101 = nil
					} else {
						if v101 == nil {
							v101 = new(Attachment)
						}
						(*v101).UnmarshalEasyJSON(in)
					}
					out.Attachments = append(out.Attachments, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latest_reactions":
			if in.IsNull() {
				in.Skip()
				out.LatestReactions = nil
			} else {
				in.Delim('[')
				if out.LatestReactions == nil {
					if !in.IsDelim(']') {
						out.LatestReactions = make([]*Reaction, 0, 8)
					} else {
						out.LatestReactions = []*Reaction{}
					}
				} else {
					out.LatestReactions = (out.LatestReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v102 *Reaction
					if in.IsNull() {
						in.Skip()
						v102 = nil
					} else {
						if v102 == nil {
							v102 = new(Reaction)
						}
						(*v102).UnmarshalEasyJSON(in)
					}
					out.LatestReactions = append(out.LatestReactions, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "own_reactions":
			if in.IsNull() {
				in.Skip()
				out.OwnReactions = nil
			} else {
				in.Delim('[')
				if out.OwnReactions == nil {
					if !in.IsDelim(']') {
						out.OwnReactions = make([]*Reaction, 0, 8)
					} else {
						out.OwnReactions = []*Reaction{}
					}
				} else {
					out.OwnReactions = (out.OwnReactions)[:0]
				}
				for !in.IsDelim(']') {
					var v103 *Reaction
					if in.IsNull() {
						in.Skip()
						v103 = nil
					} else {
						if v103 == nil {
							v103 = new(Reaction)
						}
						(*v103).UnmarshalEasyJSON(in)
					}
					out.OwnReactions = append(out.OwnReactions, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reaction_counts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ReactionCounts = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v104 int
					v104 = int(in.Int())
					(out.ReactionCounts)[key] = v104
					in.WantComma()
				}
				in.Delim('}')
			}
		case "parent_id":
			out.ParentID = string(in.String())
		case "show_in_channel":
			out.ShowInChannel = bool(in.Bool())
		case "reply_count":
			out.ReplyCount = int(in.Int())
		case "mentioned_users":
			if in.IsNull() {
				in.Skip()
				out.MentionedUsers = nil
			} else {
				in.Delim('[')
				if out.MentionedUsers == nil {
					if !in.IsDelim(']') {
						out.MentionedUsers = make([]*User, 0, 8)
					} else {
						out.MentionedUsers = []*User{}
					}
				} else {
					out.MentionedUsers = (out.MentionedUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v105 *User
					if in.IsNull() {
						in.Skip()
						v105 = nil
					} else {
						if v105 == nil {
							v105 = new(User)
						}
						(*v105).UnmarshalEasyJSON(in)
					}
					out.MentionedUsers = append(out.MentionedUsers, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV238(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v106, v107 := range in.Attachments {
				if v106 > 0 {
					out.RawByte(',')
				}
				if v107 == nil {
					out.RawString("null")
				} else {
					(*v107).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latest_reactions\":"
		out.RawString(prefix)
		if in.LatestReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v108, v109 := range in.LatestReactions {
				if v108 > 0 {
					out.RawByte(',')
				}
				if v109 == nil {
					out.RawString("null")
				} else {
					(*v109).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"own_reactions\":"
		out.RawString(prefix)
		if in.OwnReactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.OwnReactions {
				if v110 > 0 {
					out.RawByte(',')
				}
				if v111 == nil {
					out.RawString("null")
				} else {
					(*v111).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reaction_counts\":"
		out.RawString(prefix)
		if in.ReactionCounts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v112First := true
			for v112Name, v112Value := range in.ReactionCounts {
				if v112First {
					v112First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v112Name))
				out.RawByte(':')
				out.Int(int(v112Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	{
		const prefix string = ",\"show_in_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowInChannel))
	}
	if in.ReplyCount != 0 {
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyCount))
	}
	{
		const prefix string = ",\"mentioned_users\":"
		out.RawString(prefix)
		if in.MentionedUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v113, v114 := range in.MentionedUsers {
				if v113 > 0 {
					out.RawByte(',')
				}
				if v114 == nil {
					out.RawString("null")
				} else {
					(*v114).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((*in.UpdatedAt).MarshalJSON())
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV238(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV238(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV238(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV238(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV239(in *jlexer.Lexer, out *FirebaseConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "notification_template":
			out.NotificationTemplate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV239(out *jwriter.Writer, in FirebaseConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"notification_template\":"
		out.RawString(prefix)
		out.String(string(in.NotificationTemplate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FirebaseConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV239(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FirebaseConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV239(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FirebaseConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV239(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FirebaseConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV239(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV240(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cid":
			out.CID = string(in.String())
		case "type":
			out.Type = EventType(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "reaction":
			if in.IsNull() {
				in.Skip()
				out.Reaction = nil
			} else {
				if out.Reaction == nil {
					out.Reaction = new(Reaction)
				}
				(*out.Reaction).UnmarshalEasyJSON(in)
			}
		case "channel":
			if in.IsNull() {
				in.Skip()
				out.Channel = nil
			} else {
				if out.Channel == nil {
					out.Channel = new(Channel)
				}
				(*out.Channel).UnmarshalEasyJSON(in)
			}
		case "member":
			if in.IsNull() {
				in.Skip()
				out.Member = nil
			} else {
				if out.Member == nil {
					out.Member = new(ChannelMember)
				}
				(*out.Member).UnmarshalEasyJSON(in)
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v115 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v115 = nil
					} else {
						if v115 == nil {
							v115 = new(ChannelMember)
						}
						(*v115).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "user_id":
			out.UserID = string(in.String())
		case "me":
			if in.IsNull() {
				in.Skip()
				out.OwnUser = nil
			} else {
				if out.OwnUser == nil {
					out.OwnUser = new(User)
				}
				(*out.OwnUser).UnmarshalEasyJSON(in)
			}
		case "watcher_count":
			out.WatcherCount = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV240(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CID != "" {
		const prefix string = ",\"cid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Reaction != nil {
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		(*in.Reaction).MarshalEasyJSON(out)
	}
	if in.Channel != nil {
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		(*in.Channel).MarshalEasyJSON(out)
	}
	if in.Member != nil {
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(*in.Member).MarshalEasyJSON(out)
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v116, v117 := range in.Members {
				if v116 > 0 {
					out.RawByte(',')
				}
				if v117 == nil {
					out.RawString("null")
				} else {
					(*v117).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(*in.User).MarshalEasyJSON(out)
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	if in.OwnUser != nil {
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		(*in.OwnUser).MarshalEasyJSON(out)
	}
	if in.WatcherCount != 0 {
		const prefix string = ",\"watcher_count\":"
		out.RawString(prefix)
		out.Int(int(in.WatcherCount))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV240(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV240(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV240(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV240(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV241(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "push_provider":
			out.PushProvider = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV241(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"push_provider\":"
		out.RawString(prefix)
		out.String(string(in.PushProvider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV241(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV241(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV241(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV241(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV242(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "args":
			out.Args = string(in.String())
		case "set":
			out.Set = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV242(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		out.String(string(in.Args))
	}
	{
		const prefix string = ",\"set\":"
		out.RawString(prefix)
		out.String(string(in.Set))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV242(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV242(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV242(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV242(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV243(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BaseURL":
			out.BaseURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV243(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BaseURL\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV243(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV243(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV243(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV243(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV244(in *jlexer.Lexer, out *ChannelType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([]*Command, 0, 8)
					} else {
						out.Commands = []*Command{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v118 *Command
					if in.IsNull() {
						in.Skip()
						v118 = nil
					} else {
						if v118 == nil {
							v118 = new(Command)
						}
						(*v118).UnmarshalEasyJSON(in)
					}
					out.Commands = append(out.Commands, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]*Permission, 0, 8)
					} else {
						out.Permissions = []*Permission{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v119 *Permission
					if in.IsNull() {
						in.Skip()
						v119 = nil
					} else {
						if v119 == nil {
							v119 = new(Permission)
						}
						(*v119).UnmarshalEasyJSON(in)
					}
					out.Permissions = append(out.Permissions, v119)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV244(out *jwriter.Writer, in ChannelType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v120, v121 := range in.Commands {
				if v120 > 0 {
					out.RawByte(',')
				}
				if v121 == nil {
					out.RawString("null")
				} else {
					(*v121).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v122, v123 := range in.Permissions {
				if v122 > 0 {
					out.RawByte(',')
				}
				if v123 == nil {
					out.RawString("null")
				} else {
					(*v123).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV244(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV244(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV244(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV244(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV245(in *jlexer.Lexer, out *ChannelRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "last_read":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRead).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV245(out *jwriter.Writer, in ChannelRead) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"last_read\":"
		out.RawString(prefix)
		out.Raw((in.LastRead).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV245(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV245(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV245(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV245(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV246(in *jlexer.Lexer, out *ChannelMuteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_mute":
			(out.ChannelMutes).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV246(out *jwriter.Writer, in ChannelMuteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_mute\":"
		out.RawString(prefix[1:])
		(in.ChannelMutes).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMuteResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV246(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMuteResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV246(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMuteResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV246(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMuteResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV246(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV247(in *jlexer.Lexer, out *ChannelMute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "channel":
			(out.Channel).UnmarshalEasyJSON(in)
		case "expires":
			if in.IsNull() {
				in.Skip()
				out.Expires = nil
			} else {
				if out.Expires == nil {
					out.Expires = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Expires).UnmarshalJSON(data))
				}
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV247(out *jwriter.Writer, in ChannelMute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		(in.Channel).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		if in.Expires == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Expires).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV247(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV247(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV247(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV247(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV248(in *jlexer.Lexer, out *ChannelMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "is_moderator":
			out.IsModerator = bool(in.Bool())
		case "invited":
			out.Invited = bool(in.Bool())
		case "invite_accepted_at":
			if in.IsNull() {
				in.Skip()
				out.InviteAcceptedAt = nil
			} else {
				if out.InviteAcceptedAt == nil {
					out.InviteAcceptedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteAcceptedAt).UnmarshalJSON(data))
				}
			}
		case "invite_rejected_at":
			if in.IsNull() {
				in.Skip()
				out.InviteRejectedAt = nil
			} else {
				if out.InviteRejectedAt == nil {
					out.InviteRejectedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InviteRejectedAt).UnmarshalJSON(data))
				}
			}
		case "role":
			out.Role = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV248(out *jwriter.Writer, in ChannelMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if in.IsModerator {
		const prefix string = ",\"is_moderator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsModerator))
	}
	if in.Invited {
		const prefix string = ",\"invited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Invited))
	}
	if in.InviteAcceptedAt != nil {
		const prefix string = ",\"invite_accepted_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteAcceptedAt).MarshalJSON())
	}
	if in.InviteRejectedAt != nil {
		const prefix string = ",\"invite_rejected_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.InviteRejectedAt).MarshalJSON())
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV248(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV248(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV248(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV248(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV249(in *jlexer.Lexer, out *ChannelConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "typing_events":
			out.TypingEvents = bool(in.Bool())
		case "read_events":
			out.ReadEvents = bool(in.Bool())
		case "connect_events":
			out.ConnectEvents = bool(in.Bool())
		case "search":
			out.Search = bool(in.Bool())
		case "reactions":
			out.Reactions = bool(in.Bool())
		case "replies":
			out.Replies = bool(in.Bool())
		case "mutes":
			out.Mutes = bool(in.Bool())
		case "message_retention":
			out.MessageRetention = string(in.String())
		case "max_message_length":
			out.MaxMessageLength = int(in.Int())
		case "automod":
			out.Automod = modType(in.String())
		case "automod_behavior":
			out.ModBehavior = modBehaviour(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV249(out *jwriter.Writer, in ChannelConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"typing_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.TypingEvents))
	}
	{
		const prefix string = ",\"read_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadEvents))
	}
	{
		const prefix string = ",\"connect_events\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectEvents))
	}
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix)
		out.Bool(bool(in.Search))
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.Reactions))
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replies))
	}
	{
		const prefix string = ",\"mutes\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutes))
	}
	{
		const prefix string = ",\"message_retention\":"
		out.RawString(prefix)
		out.String(string(in.MessageRetention))
	}
	{
		const prefix string = ",\"max_message_length\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMessageLength))
	}
	{
		const prefix string = ",\"automod\":"
		out.RawString(prefix)
		out.String(string(in.Automod))
	}
	{
		const prefix string = ",\"automod_behavior\":"
		out.RawString(prefix)
		out.String(string(in.ModBehavior))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV249(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV249(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV249(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV249(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV250(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "cid":
			out.CID = string(in.String())
		case "config":
			(out.Config).UnmarshalEasyJSON(in)
		case "created_by":
			if in.IsNull() {
				in.Skip()
				out.CreatedBy = nil
			} else {
				if out.CreatedBy == nil {
					out.CreatedBy = new(User)
				}
				(*out.CreatedBy).UnmarshalEasyJSON(in)
			}
		case "frozen":
			out.Frozen = bool(in.Bool())
		case "member_count":
			out.MemberCount = int(in.Int())
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*ChannelMember, 0, 8)
					} else {
						out.Members = []*ChannelMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v124 *ChannelMember
					if in.IsNull() {
						in.Skip()
						v124 = nil
					} else {
						if v124 == nil {
							v124 = new(ChannelMember)
						}
						(*v124).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*Message, 0, 8)
					} else {
						out.Messages = []*Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v125 *Message
					if in.IsNull() {
						in.Skip()
						v125 = nil
					} else {
						if v125 == nil {
							v125 = new(Message)
						}
						(*v125).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			if in.IsNull() {
				in.Skip()
				out.Read = nil
			} else {
				in.Delim('[')
				if out.Read == nil {
					if !in.IsDelim(']') {
						out.Read = make([]*ChannelRead, 0, 8)
					} else {
						out.Read = []*ChannelRead{}
					}
				} else {
					out.Read = (out.Read)[:0]
				}
				for !in.IsDelim(']') {
					var v126 *ChannelRead
					if in.IsNull() {
						in.Skip()
						v126 = nil
					} else {
						if v126 == nil {
							v126 = new(ChannelRead)
						}
						(*v126).UnmarshalEasyJSON(in)
					}
					out.Read = append(out.Read, v126)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "last_message_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMessageAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV250(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.CID))
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		(in.Config).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		if in.CreatedBy == nil {
			out.RawString("null")
		} else {
			(*in.CreatedBy).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"frozen\":"
		out.RawString(prefix)
		out.Bool(bool(in.Frozen))
	}
	{
		const prefix string = ",\"member_count\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v127, v128 := range in.Members {
				if v127 > 0 {
					out.RawByte(',')
				}
				if v128 == nil {
					out.RawString("null")
				} else {
					(*v128).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v129, v130 := range in.Messages {
				if v129 > 0 {
					out.RawByte(',')
				}
				if v130 == nil {
					out.RawString("null")
				} else {
					(*v130).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		if in.Read == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v131, v132 := range in.Read {
				if v131 > 0 {
					out.RawByte(',')
				}
				if v132 == nil {
					out.RawString("null")
				} else {
					(*v132).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"last_message_at\":"
		out.RawString(prefix)
		out.Raw((in.LastMessageAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV250(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV250(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV250(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV250(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV251(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "author_name":
			out.AuthorName = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "title_link":
			out.TitleLink = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "image_url":
			out.ImageURL = string(in.String())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "asset_url":
			out.AssetURL = string(in.String())
		case "og_scrape_url":
			out.OGScrapeURL = string(in.String())
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV251(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.AuthorName != "" {
		const prefix string = ",\"author_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorName))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TitleLink != "" {
		const prefix string = ",\"title_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleLink))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageURL))
	}
	if in.ThumbURL != "" {
		const prefix string = ",\"thumb_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbURL))
	}
	if in.AssetURL != "" {
		const prefix string = ",\"asset_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AssetURL))
	}
	if in.OGScrapeURL != "" {
		const prefix string = ",\"og_scrape_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OGScrapeURL))
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV251(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV251(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV251(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV251(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV252(in *jlexer.Lexer, out *AppSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disable_auth_checks":
			if in.IsNull() {
				in.Skip()
				out.DisableAuth = nil
			} else {
				if out.DisableAuth == nil {
					out.DisableAuth = new(bool)
				}
				*out.DisableAuth = bool(in.Bool())
			}
		case "disable_permissions_checks":
			if in.IsNull() {
				in.Skip()
				out.DisablePermissions = nil
			} else {
				if out.DisablePermissions == nil {
					out.DisablePermissions = new(bool)
				}
				*out.DisablePermissions = bool(in.Bool())
			}
		case "apn_config":
			if in.IsNull() {
				in.Skip()
				out.APNConfig = nil
			} else {
				if out.APNConfig == nil {
					out.APNConfig = new(APNConfig)
				}
				(*out.APNConfig).UnmarshalEasyJSON(in)
			}
		case "firebase_config":
			if in.IsNull() {
				in.Skip()
				out.FirebaseConfig = nil
			} else {
				if out.FirebaseConfig == nil {
					out.FirebaseConfig = new(FirebaseConfig)
				}
				(*out.FirebaseConfig).UnmarshalEasyJSON(in)
			}
		case "webhook_url":
			if in.IsNull() {
				in.Skip()
				out.WebhookURL = nil
			} else {
				if out.WebhookURL == nil {
					out.WebhookURL = new(string)
				}
				*out.WebhookURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV252(out *jwriter.Writer, in AppSettings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisableAuth != nil {
		const prefix string = ",\"disable_auth_checks\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.DisableAuth))
	}
	if in.DisablePermissions != nil {
		const prefix string = ",\"disable_permissions_checks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DisablePermissions))
	}
	if in.APNConfig != nil {
		const prefix string = ",\"apn_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.APNConfig).MarshalEasyJSON(out)
	}
	if in.FirebaseConfig != nil {
		const prefix string = ",\"firebase_config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FirebaseConfig).MarshalEasyJSON(out)
	}
	if in.WebhookURL != nil {
		const prefix string = ",\"webhook_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WebhookURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV252(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV252(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV252(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV252(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV253(in *jlexer.Lexer, out *AppConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "organization":
			out.OrganizationName = string(in.String())
		case "webhook_url":
			out.WebhookURL = string(in.String())
		case "suspended_explanation":
			out.SuspendedExplanation = string(in.String())
		case "push_notifications":
			(out.PushNotifications).UnmarshalEasyJSON(in)
		case "channel_configs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ConfigNameMap = make(map[string]*ChannelConfig)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v133 *ChannelConfig
					if in.IsNull() {
						in.Skip()
						v133 = nil
					} else {
						if v133 == nil {
							v133 = new(ChannelConfig)
						}
						(*v133).UnmarshalEasyJSON(in)
					}
					(out.ConfigNameMap)[key] = v133
					in.WantComma()
				}
				in.Delim('}')
			}
		case "policies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Policies = make(map[string][]Policy)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v134 []Policy
					if in.IsNull() {
						in.Skip()
						v134 = nil
					} else {
						in.Delim('[')
						if v134 == nil {
							if !in.IsDelim(']') {
								v134 = make([]Policy, 0, 1)
							} else {
								v134 = []Policy{}
							}
						} else {
							v134 = (v134)[:0]
						}
						for !in.IsDelim(']') {
							var v135 Policy
							(v135).UnmarshalEasyJSON(in)
							v134 = append(v134, v135)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Policies)[key] = v134
					in.WantComma()
				}
				in.Delim('}')
			}
		case "suspended":
			out.Suspended = bool(in.Bool())
		case "disable_auth_checks":
			out.DisableAuth = bool(in.Bool())
		case "disable_permissions_checks":
			out.DisablePermissions = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV253(out *jwriter.Writer, in AppConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationName))
	}
	{
		const prefix string = ",\"webhook_url\":"
		out.RawString(prefix)
		out.String(string(in.WebhookURL))
	}
	{
		const prefix string = ",\"suspended_explanation\":"
		out.RawString(prefix)
		out.String(string(in.SuspendedExplanation))
	}
	{
		const prefix string = ",\"push_notifications\":"
		out.RawString(prefix)
		(in.PushNotifications).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"channel_configs\":"
		out.RawString(prefix)
		if in.ConfigNameMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v136First := true
			for v136Name, v136Value := range in.ConfigNameMap {
				if v136First {
					v136First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v136Name))
				out.RawByte(':')
				if v136Value == nil {
					out.RawString("null")
				} else {
					(*v136Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"policies\":"
		out.RawString(prefix)
		if in.Policies == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v137First := true
			for v137Name, v137Value := range in.Policies {
				if v137First {
					v137First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v137Name))
				out.RawByte(':')
				if v137Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v138, v139 := range v137Value {
						if v138 > 0 {
							out.RawByte(',')
						}
						(v139).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"suspended\":"
		out.RawString(prefix)
		out.Bool(bool(in.Suspended))
	}
	{
		const prefix string = ",\"disable_auth_checks\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisableAuth))
	}
	{
		const prefix string = ",\"disable_permissions_checks\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisablePermissions))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV253(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV253(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV253(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV253(l, v)
}
func easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV254(in *jlexer.Lexer, out *APNConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "development":
			out.Development = bool(in.Bool())
		case "auth_type":
			out.AuthType = string(in.String())
		case "auth_key":
			if in.IsNull() {
				in.Skip()
				out.AuthKey = nil
			} else {
				out.AuthKey = in.Bytes()
			}
		case "notification_template":
			out.NotificationTemplate = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "bundle_id":
			out.BundleID = string(in.String())
		case "team_id":
			out.TeamID = string(in.String())
		case "key_id":
			out.KeyID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV254(out *jwriter.Writer, in APNConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"development\":"
		out.RawString(prefix)
		out.Bool(bool(in.Development))
	}
	if in.AuthType != "" {
		const prefix string = ",\"auth_type\":"
		out.RawString(prefix)
		out.String(string(in.AuthType))
	}
	if len(in.AuthKey) != 0 {
		const prefix string = ",\"auth_key\":"
		out.RawString(prefix)
		out.Base64Bytes(in.AuthKey)
	}
	{
		const prefix string = ",\"notification_template\":"
		out.RawString(prefix)
		out.String(string(in.NotificationTemplate))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	if in.BundleID != "" {
		const prefix string = ",\"bundle_id\":"
		out.RawString(prefix)
		out.String(string(in.BundleID))
	}
	if in.TeamID != "" {
		const prefix string = ",\"team_id\":"
		out.RawString(prefix)
		out.String(string(in.TeamID))
	}
	if in.KeyID != "" {
		const prefix string = ",\"key_id\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APNConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV254(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APNConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson458e82b7EncodeGithubComGetStreamStreamChatGoV254(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APNConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV254(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APNConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson458e82b7DecodeGithubComGetStreamStreamChatGoV254(l, v)
}
